<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://codemcd.github.io/pages/CODEMCD/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codemcd.github.io/pages/CODEMCD/" rel="alternate" type="text/html" /><updated>2019-03-06T20:58:40+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/feed.xml</id><title type="html">CODEMCD’s Tech BLOG</title><subtitle>My Tech Blog</subtitle><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><entry><title type="html">Test</title><link href="https://codemcd.github.io/pages/CODEMCD/study/OperatingSystem-Test/" rel="alternate" type="text/html" title="Test" /><published>2019-03-05T00:00:00+09:00</published><updated>2019-03-05T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/study/OperatingSystem-Test</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/study/OperatingSystem-Test/">&lt;h2 id=&quot;운영체제-테스트중&quot;&gt;운영체제 테스트중…&lt;/h2&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Study_OperatingSystem" /><summary type="html">운영체제 테그 테스트</summary></entry><entry><title type="html">[C/C++]문자열 상수와 문자열 변수</title><link href="https://codemcd.github.io/pages/CODEMCD/language/CC++-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%83%81%EC%88%98%EC%99%80-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B3%80%EC%88%98/" rel="alternate" type="text/html" title="[C/C++]문자열 상수와 문자열 변수" /><published>2019-01-09T00:00:00+09:00</published><updated>2019-01-09T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/language/CC++-%EB%AC%B8%EC%9E%90%EC%97%B4%20%EC%83%81%EC%88%98%EC%99%80%20%EB%AC%B8%EC%9E%90%EC%97%B4%20%EB%B3%80%EC%88%98</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/language/CC++-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%83%81%EC%88%98%EC%99%80-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B3%80%EC%88%98/">&lt;p&gt;C/C++ 에서 문자열을 특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; 형으로 다룰 때 문자열 상수와 문자열 변수를 구분해서 사용해야 한다. 그렇지 않으면 수 많은 에러때문에 고생할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저, C/C++ 의 메모리 구조를 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/50886161-17ff3680-1433-11e9-992f-a29ac316482d.JPG&quot; alt=&quot;c memory structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메모리는 총 3가지로 구분되고, 위와 같이 구성되어 있다. 데이터 영역에서 코드 영역과 나누어 구분하기도 한다.&lt;/p&gt;

&lt;p&gt;이제 문자열 상수와 문자열 변수의 예제를 보자.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//문자열 상수
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//문자열 변수
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문자열 상수는 포인터 변수를 선언하여 문자열을 대입하고, 문자열 변수는 배열을 선언하여 대입한다. 여기서 각각 메모리를 차지하는 영역을 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/50886162-1897cd00-1433-11e9-9753-0ca7c63c24a8.JPG&quot; alt=&quot;default&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림에서 보듯이, 문자열 상수에서 문자열은 데이터 영역이고, 문자열 변수는 스택 영역에 위치해 있다. 이름에서도 알 수 있듯이, 문자열 상수는 읽기만 가능하고 바꿀 수는 없다. 문자열을 바꾸기 위해서는 새로운 문자열 주소를 할당해야 한다. 즉, 포인터 변수가 바뀐다. 반면에, 문자열 변수는 읽고, 쓰기가 가능하다. 문자열을 바꿀려면 해당 인덱스에 접근하여 바꿀 수 있다. 하지만 위와 같은 배열 선언은 포인터 상수이다. 즉, 포인터는 바뀔 수 없다. 그렇다면, 문자열 상수와 변수의 데이터가 “apple” 에서 “banana”로 변경하려면 어떻게 해야 할까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문자열 상수&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// banana
//strcpy(c, &quot;banana&quot;);    // Runtime Error!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;문자열 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//v = &quot;banana&quot;;           // syntax error!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// banana
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 수행해야 한다. 위에서 설명하였듯이, 문자열 상수는 “banana” 라는 새로운 문자열 주소를 가르키게 하였고, 문자열 변수는 인덱스에 접근하여 하나 하나 변경해주었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;strcpy&lt;/code&gt; 함수를 잠깐 보자면 간단하게 아래와 같이 구현되어 있다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고, 서로 반대로 변경할려고 하면 에러가 발생한다. 이렇게 바뀐 모습을 그림으로 보면 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/50886163-1897cd00-1433-11e9-85d5-9a269b1924c5.JPG&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;문자열 상수와 변수의 특징을 정리하면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;문자열 상수
    &lt;ul&gt;
      &lt;li&gt;실제 문자열은 데이터 영역에 저장된다.&lt;/li&gt;
      &lt;li&gt;읽기만 가능하다.(배열 인덱스로 접근하여 읽을 수는 있지만, 값은 변경할 수 없다.)&lt;/li&gt;
      &lt;li&gt;문자열을 변경하려면 포인터를 바꿔주어야 한다.(포인터 변수)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;문자열 변수
    &lt;ul&gt;
      &lt;li&gt;실제 문자열은 스택 영역에 저장된다.&lt;/li&gt;
      &lt;li&gt;배열 인덱스로 접근하여 읽고 쓰기가 가능하다.&lt;/li&gt;
      &lt;li&gt;문자열을 변경하려면 배열 인덱스 하나 하나에 접근하여 바꿔준다.(포인터 상수)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;동적-할당에서-문자열&quot;&gt;동적 할당에서 문자열&lt;/h3&gt;
&lt;p&gt;동적 할당에서는 문자열을 상수로 초기화하면 문자열 상수처럼 사용해야 하고, 변수로 선언하면 문자열 변수처럼 사용해야 한다. 아래에도 잠깐 살펴보겠지만 동적 할당을 제대로 사용하는 것은 문자열 변수로 사용하는 것이다. 다음과 같은 예제를 보자.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//초기화 1 문자열 상수
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// banana
//strcpy(str1, &quot;banana&quot;);    // Runtime Error!
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//초기화 2 문자열 변수
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//str2 = &quot;banana&quot;;           // Runtime error!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// banana
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 동적 할당을 문자열 상수로 사용하면 메모리 해제 문제가 발생하는 것으로 보인다. 생각해보면 당연한 것 같다. 위의 예제서도 보이듯이 동적으로 10개의 char 형을 할당받았는데 문자열 상수를 사용하면 할당받은 메모리를 사용하는 것이 아니라 선언된 포인터 변수만을 사용하는 것이 된다.&lt;/p&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Language_CCpp" /><summary type="html">C/C++ 에서 문자열을 사용할 때 알아야할 내용</summary></entry><entry><title type="html">[Algorithm]비트마스크</title><link href="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/" rel="alternate" type="text/html" title="[Algorithm]비트마스크" /><published>2019-01-06T00:00:00+09:00</published><updated>2019-01-06T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%AC/">&lt;p&gt;비트마스크란 정수의 이진수 표현을 자료 구조로 쓰는 기법을 말한다. 비트마스크는 다음과 같은 특징을 가진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;더 빠른 수행 시간
컴퓨터는 내부적으로 이진수를 사용하기하므로, 이진법 관련 연산들을 매우 빨리 수행할 수 있다. 이를 이용하면 시간복잡도를 O(1) 로 구현할 수 있는 경우가 많다. 물론 비트마스크를 사용할 수 있다는 것은 원소의 수가 많지 않다는 뜻이지만, 이와 같은 연산을 굉장히 여러 번 수행하는 경우에는 큰 속도 향샹을 가져올 수 있다.&lt;/li&gt;
  &lt;li&gt;더 간결한 코드
비트마스크를 사용하면 다양한 집합 연산들을 반복문 없이 한 줄에 쓸 수 있으므로 훨씬 짧은 코드로 작성할 수 있다.&lt;/li&gt;
  &lt;li&gt;더 작은 메모리 사용량
비트마스크를 이용하는 코드들은 같은 데이터를 더 적은 메모리를 사용해 표현할 수 있다. 더 적은 데이터를 사용한다는 것은 더 많은 데이터를 미리 계산해서 저장해 둘 수 있다는 뜻이고, 이는 프로그램 속도 향샹과 캐시 효율을 높일 수 있다.&lt;/li&gt;
  &lt;li&gt;연관 배열을 배열로 대체
boolean 을 키로 갖는 연관 배열 객체 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&amp;lt;vector&amp;lt;bool&amp;gt;, int&amp;gt;&lt;/code&gt; 를 사용하고 있다고 하자. 이 경우에 비트마스크를 사용하여 같은 정보를 정수 변수로 나타내면 단순하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;int[]&lt;/code&gt; 배열로 표현할 수 있다. 많은 경우 이 기법은 시간과 메모리에서 큰 차이를 불러옵니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;비트-연산자&quot;&gt;비트 연산자&lt;/h2&gt;
&lt;p&gt;비트 연산자는 정수 변수를 비트별로 조작할 수 있는 연산자입니다.&lt;/p&gt;

&lt;h3 id=&quot;and-or-xor&quot;&gt;AND, OR, XOR&lt;/h3&gt;
&lt;p&gt;비트별 AND, OR, XOR 연산의 결과는 아래의 표와 같다. 그리고 괄호안은 C++ 기준 표현 방식이다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;bit 1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;bit 2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;AND(&amp;amp;)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;OR(&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;)&lt;/th&gt;
      &lt;th&gt;XOR(^)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;예제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/50885283-98706800-1430-11e9-9084-d7926d174b0f.JPG&quot; alt=&quot;and_or_xor&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;not&quot;&gt;NOT&lt;/h3&gt;
&lt;p&gt;비트별 NOT 연산은 켜져 있는 비트는 끄고, 꺼져 있는 비트는 켠 결과를 반환한다. C++ 기준 정수 a의 비트별 NOT 연산을 수행하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;~a&lt;/code&gt; 로 표현한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/50885284-9908fe80-1430-11e9-9f17-dfe129362777.JPG&quot; alt=&quot;not&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;shift&quot;&gt;shift&lt;/h3&gt;
&lt;p&gt;시프트(shift) 연산자는 정수 a 의 비트들을 왼쪽 또는 오른쪽으로 원하는 만큼 움직인다. C++ 기준 정수 a 를 왼쪽으로 b 비트 시프트 수행은 &lt;code class=&quot;highlighter-rouge&quot;&gt;a &amp;lt;&amp;lt; b&lt;/code&gt;이고, 오른쪽으로 b 비트 시프트 수행은 &lt;code class=&quot;highlighter-rouge&quot;&gt;a &amp;gt;&amp;gt; b&lt;/code&gt; 로 표현한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/50885285-9908fe80-1430-11e9-9577-f03d826eb059.JPG&quot; alt=&quot;shift&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;유의할-점&quot;&gt;유의할 점&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;비트 연산자 우선순위
C++ 이나 Java 에서는 &amp;amp;, |, ^ 등의 비트 연산자의 우선순위는 ==, != 등의 비교 연산자의 우선순위보다 낮다. 즉 아래와 같은 코드는 원하지 않는 결과가 나온다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이러한 실수를 줄이기 위해서는 비트 연산자를 사용할 때는 반드시 괄호를 추가하는 습관을 들이는 것이 좋다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;오버플로
64비트 정수를 비트마스크로 사용할 때 아래의 코드는 문제가 발생할 확률이 높다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isBitSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 부호 없는 64비트 비트마스크 a 의  b 번 비트가 켜져 있는지 확인하는 코드이다. 여기서 문제점은 1 이라는 수이다. C++ 에서 1 은 기본적으로 부호 있는 32비트 상수이다. 만약 b 가 32 이상이면 오버플로가 발생한다. 이를 해결하기 위해서는 1 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ull&lt;/code&gt; 을 붙여 64비트 정수로 형변환을 해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;부호
부호 있는 정수형에서 최상위 비트는 부호를 나타낸다. 최상위 비트가 켜져있으면 음수를 표현하는 것이다. 이와 같이 부호가 있는 32비트 정수형에서 모든 비트를 사용한다면 자잘한 버그가 난다. 만약 해당 비트를 모두 사용하고 싶은 경우에는 부호가 없는 정수형을 써야한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;비트마스크를-이용한-집합-구현&quot;&gt;비트마스크를 이용한 집합 구현&lt;/h2&gt;
&lt;p&gt;비트마스크의 가장 중요한 사용 사례는 집합을 구현하는 것이다. 이 표현에서 N 비트 정수 변수는 0 부터  N - 1 까지의 정수 원소를 가질 수 있는 집합이 된다. 이때 원소 i 가 집합에 속해 있는지 여부는 $2^i$ 을 나타내는 비트가 켜져있는지를 확인해야한다. 예를 들어 여섯 개의 원소를 갖는 집합 {1, 4, 5, 6, 7, 9} 를 표현하는 정수는 754 이다.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;2^1 + 2^4 + 2^5 + 2^6 + 2^7 + 2^9 = 10 1111 0010_2 = 754&lt;/script&gt;

&lt;h3 id=&quot;피자집-예제&quot;&gt;피자집 예제&lt;/h3&gt;
&lt;p&gt;고객들이 원하는 토핑을 골라 주문할 수 있는 피자집의 주문 시스템을 만들다고 하자. 이 피자집에는 0 부터 19 까지의 번호를 갖는 20 가지의 토핑이 있고, 주문시 토핑을 넣기/넣지 않기를 선택할 수 있다. 그러면 한 피자의 정보는 20 종류의 원소만을 가지는 집합이 되고, 비트마스크를 이용해 표현할 수 있다.(물론, 크기 20 의 불린 값 배열을 사용할 수도 있다.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공집합과 꽉 찬 집합 구하기
공집합은 간단히 상수 0 으로 나타낼 수 있다. 꽉 찬 집합은 아래의 코드와 같이 표현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullPizza&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// (1 &amp;lt;&amp;lt; 20) = 000100000000000000000000
// (1 &amp;lt;&amp;lt; 20) - 1 = 000011111111111111111111
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;원소 추가
집합의 가장 기초적인 연산은 원소를 추가하고 삭제하는 것이다. 비트마스크를 사용하는 집합에서 원소를 추가한다는 것은 해당 비트를 켠다는 것이다. 토핑 p 를 집합에 추가하는 코드는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;원소의 포함 여부 확인
집합 toppings에 토핑 p 가 추가되었는지 확인하는 코드는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;topping p is in&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주의할 점은 &amp;amp; 연산의 결과값은 0 또는 (1 « p) 이다. 대부분의 논리 연산처럼 0(false) 혹은 1(true) 값이 반환된다고 생각하면 안된다. 예를 들어 p = 3 인 경우에서, p 가 토핑에 들어있다면 위의 조건문은 8 을 반환하고, 들어있지 않다면 0 을 반환한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원소 삭제
토핑 p 를 삭제하는 경우에는 간단하게 아래의 코드를 생각할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 위 코드는 토핑 p 가 반드시 toppings 집합에 포함되어 있어야 한다는 조건이 있다. 그러므로, 원소가 포함되어 있는지 여부와 상광없이 정상적으로 삭제하고 싶다면 다음 코드를 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;원소 토글(toggle)
원소 토글은 해당 비트가 켜져 있으면 끄고, 꺼져 있으면 켜는 동작을 수행한다. 이것은 간단히 XOR 연산을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;두 집합에 대해 연산하기
두 개의 토핑 집합 a 와 b 의 집합 연산은 다음과 같이 구할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;added&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// a 와 b 의 합집합
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// a 와 b 의 교집합
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// a 에서 b 를 뺀 차집합   
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toggled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// a 와 b 중 하나에만 포함된 원소들의 집합
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드의 수행 시간은 원소 하나에 대해 수행하는 것과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;집합의 크기 구하기
비트마스크를 사용할 때 집합에 포함된 원소의 수를 구하는 간단한 방법은 딱히 없다. 따라서 각 비트를 순회하면서 켜져 있는 비트의 수를 직접 세어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bitCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 외에도 여러 프로그래밍 환경에서 위의 동작을 수행하는 내장 명령어를 제공한다. 다음은 32비트 부호 없는 정수 toppings 에 켜진 비트의 수를 구하는 명령어들이다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;gcc/g++&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;__builtin_popcount(toppings)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Visual C++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;__popcnt(toppings)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer.bitCount(toppings)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이 명령어들은 다양한 최적화를 통해 매우 빠르게 동작한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최소 원소 찾기
최소 원소는 최하위 비트에서 시작하여 가장 처음 켜져 있는 비트를 말한다. 즉, 최소 원소부터 최하위 비트까지 0 의 개수를 통해 해당 최소 원소의 번호를 반환한다. 이 동작 역시 내장 명령어로 제공한다. 다음은 32비트 부호없는 정수 toppings에서 켜져 있는 최하위 비트의 위치를 구하는 명령어이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;gcc/g++&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;__builtin_ctz(toppings)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Visual C++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;_BitScanForward(&amp;amp;index, toppings)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Integer.numberOfTrailingZeros(toppings)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이 연산들 역시 매우 빠르게 동작한다. 그리고 g++ 의 내장 함수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;__buitin_ctz()&lt;/code&gt; 는 입력으로 0 이 주어졌을 때의 결과가 정의되어 있지 않기 때문에 주의해야 한다.&lt;/p&gt;

&lt;p&gt;최하위 비트의 번호 대신 해당 비트를 직접 구할 수도 있다. 예를 들어 40이 주어질 경우 3 대신 &amp;amp;2^3$ 을 구하고 싶은 것이다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstTopping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이는 컴퓨터가 음수를 표현하는 2의 보수를 사용한다. 2의 보수를 사용하는 시스템에서는 음수 -toppings 를 표현하기 위해 toppings 에 비트별 NOT 연산을 적용하고 그 결과에 1을 더한다. 예를 들어 toppings 의 값이 160 이라고 하자. 그러면 아래와 같은 계산 과정을 가진다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       toppings      = 1010 0000
      -toppings      = 0110 0000
toppings &amp;amp; -toppings = 0010 0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;최소 원소 지우기
최소 원소를 구하지 않고도 최소 원소를 지울 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이는 toppings - 1 의 이진수 표현을 생각해보면 쉽게 알 수 있다. toppings - 1 의 이진수 표현은 toppings 의 켜져 있는 최하위 비트를 끄고 그 밑의 비트들을 전부 켠 것이다. 예를 들어 위와 같이 toppings 값이 160 이라고 하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       toppings           = 1010 0000
       toppings - 1       = 1001 1111
toppings &amp;amp; (toppings - 1) = 1000 0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 방법은 어떤 정수가 2의 거듭제곱 값인지 확인할 때도 유용하다. 2의 거듭제곱 갑들은 이진수 표현에서 켜진 비트가 1개 밖에 없으므로, 위 코드의 결과값은 0이 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 부분 집합 순회하기
비트마스크를 사용하면 for 문 하나로 간단히 모든 부분 집합을 순회할 수 있다. 예를 들어 pizza 가 {a, b, c} 라면 {a}, {b}, {c}, {a, b}, {a, c}, {b, c}, {a, b, c} 가 나온다. 이의 코드는 다음과 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pizza&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pizza&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//subset 은 pizza 의 부분집합
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 for 문은 subset = 0 인 시점에서 종료하므로, 공집합은 방문하지 않는다는 것에 주의해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;참고문헌&quot;&gt;참고문헌&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로그래밍 대회에서 배우는 알고리즘 문제해결전략, 인사이트, 구종만 지음&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Algorithm_Algorithm" /><summary type="html">비트 연산</summary></entry><entry><title type="html">[jsdsLib]Data Structures Visualizations</title><link href="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-Data-Structure-Visualizations/" rel="alternate" type="text/html" title="[jsdsLib]Data Structures Visualizations" /><published>2019-01-03T00:00:00+09:00</published><updated>2019-01-03T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-%5BjsdsLib%5DData%20Structure%20Visualizations</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-Data-Structure-Visualizations/">&lt;p&gt;이 문서는 오픈소스 Data Structures Visualizations 튜토리얼 부분을 번역한 것입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;오타, 잘못된 번역이 많을 수 있습니다. 감안하고 읽어주세요…&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;원문&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.usfca.edu/~galles/visualization/source.html&quot;&gt;https://www.cs.usfca.edu/~galles/visualization/source.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;주의사항&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;이 소스 코드를 보고 알고리즘을 이해할려고 하지 마십시오. 이 소프트웨어는 알고리즘을 시각화하는 프로퍼티를 만들기 위해 한 두개의 이해하기 힘든 알고리즘을 구현하였습니다. 적절한 소스 코드를 얻을려면 favorte textbook이나 위키디피아를 참고할 것을 추천합니다.&lt;/li&gt;
  &lt;li&gt;다른 모든 소프트웨어들과 같이 이 프로젝트는 주기적으로 업데이트를 하고 있습니다. 이 프로젝트은 자바 프로젝트로 시작하여, ActionScript3(flash)로 다시 구현되었고, 자바스크립트에 이식하였습니다. 이는 플래시와 자바스크립트를 공부할 수 있는 기회였고, 시간이 지나면서 이미 이 소프트웨어가 반 이상 진행된 후였습니다. 현재까지 코드를 최적화하고 있지만 아직까지 최적화해야할 곳이 어느정도 많이 남아있습니다. 다음 버전에서는 더 발전해 있을 것입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;visualization-creation-tutorial&quot;&gt;Visualization Creation Tutorial&lt;/h2&gt;
&lt;p&gt;새로운 시각화를 만들기 위해서는 자바스크립트(.js)파일과 HTML(.html) 파일이 필요합니다. HTML 파일은 한 템플릿이 필요하고, 한 두가지 정도 변경되어야 합니다(자바스크립트 파일 이름과 같은 것들). HTML 템플릿의 예제들과 이것을 어떻게 변경할 지에 대해서는 튜토리얼 마지막에 있습니다. 자바스크립트 파일에서는 다음의 기능을하는 function 을 생성합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;시각화를 조정할 적절한 control 들을 만든다.(element 를 삽입하거나 삭제하는 기능 등)&lt;/li&gt;
  &lt;li&gt;시각화를 구현하는 control 들을 위한 콜백 함수를 만든다. 이 시각화는 애니메이션 관리자에게 문자열 배열을 보냄으로서 구현된다. 이 애니메이션 관리자는 애니메이션을 구현할 것이고, 모든 애니메이션 control 을 관리한다.&lt;/li&gt;
  &lt;li&gt;애니메이션 관리자로부터 undo 이벤트를 위한 listen 함수를 실행하며, undo 이벤트가 감지되면 마지막 작업을 되돌린다. (roll back)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;using-algorithm-function&quot;&gt;Using Algorithm function&lt;/h3&gt;
&lt;p&gt;해당 라이브러리를 사용하더라도 자바스크립트 function 을 만드는 것은 꽤 복잡합니다. 만약 만들고자 하는 함수가 이 Algorithm 함수(AlgorithmLibrary/Algorithm.js) 하위 클래스로 만든다면, 많은 복잡한 세부사항들을 자동화할 수 있습니다. 압축 파일에 포함되어 있는 “MyAlgorithm”(AlgorithmLibrary/MyAlgorithm.js) 함수들을 기반으로 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 프로젝트는 FreeBSD 라이센스를 따릅니다. 모든 코드 파일에는 아래와 같은 라이선스 세부사항이 표시되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Copyright 2011 David Galles, University of San Francisco. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of
// conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list
// of conditions and the following disclaimer in the documentation and/or other materials
// provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY David Galles ``AS IS'' AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL  OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// The views and conclusions contained in the software and documentation are those of the
// authors and should not be interpreted as representing official policies, either expressed
// or implied, of the University of San Francisco
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 알고리즘 정의입니다. 자바스크립트 내에서 일종의 가짜(faked) 상속을 사용하고 있습니다. 이 프로젝트의 함수를 다음과 같이 정의합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;함수 프로토타입은 슈퍼 클래스의 프로토타입으로 설정한다.&lt;/li&gt;
  &lt;li&gt;생성자를 우리 자신의 생성자로 재설정한다.&lt;/li&gt;
  &lt;li&gt;슈퍼 클래스 프로토타입을 캐시한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위는 자바의 ‘super’ 호출과 같은 기능을 구현하기 위함입니다. 이렇게 상속을 구현한 것은 생성자가 정상적으로 동작하기 위한 것입니다. 그리고 메인 생성자 함수가 init 함수를 호출하는 것 외에는 어떠한 기능도 하지 않습니다.(이 방법은 슈퍼 클래스의 init 함수를 호출할 수도 있습니다. 하지만 이는 보안적으로 매우 위험합니다.)&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superclass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각 함수는 자신의 생성자를 가지고 있습니다. 일반적으로, 각 자신의 생성자에서 다음과 같은 것들이 필요할 것이라고 예상합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;슈퍼 클래스 생성자를 호출한다. 자바스크립트 문법에 따르면, 이것은 약간 이상할 수 있습니다. 그러나 이 프로젝트는 자바스크립트의 전통적인 객체 지향 패러다임에 지향하고 있지만, 이것이 구현에서 조금 어렵고 복잡할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;필요한 컨트롤러를 추가한다.&lt;/li&gt;
  &lt;li&gt;메모리 매니저를 초기화한다. 대부분의 경우에는 매우 간단한 메모리 매니저를 사용할 것입니다. – 오래된 파스칼 스타일의 “Never free” 메모리 매니저입니다. 리스트는 0부터 시작해서 새로운 메모리가 필요할 때마다 증가시킵니다.&lt;/li&gt;
  &lt;li&gt;사용하게 될 자료 구조를 초기화 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Call the unit function of our &quot;superclass&quot;, which adds a couple of&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// listeners, and sets up the undo stack&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addControls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Useful for memory management&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// TODO:  Add any code necessary to set up your own algorithm.  Initialize data&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// structures, etc.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;control 을 추가하는 함수가 있습니다. 여기에는 control 을 추가하는 helper 함수 역시 몇 가지 있습니다. Algorithm.js 파일을 보면 helper 함수에 대한 정보를 알 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addControls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Add any necessary controls for your algorithm.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   There are libraries that help with text entry, buttons, check boxes, radio groups&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// To add a button myButton:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     this.mybytton = addControlToAlgorithmBar(&quot;Button&quot;, &quot;MyButtonText&quot;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     this.mybytton.onclick = this.myCallback.bind(this);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     this.controls.push(this.mybutton);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   where myCallback is a method on this function that implemnts the callback&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// To add a text field myField:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.myField = addControlToAlgorithmBar(&quot;Text&quot;, &quot;&quot;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.myField.onkeydown = this.returnSubmit(this.myField,  &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//                                               this.anotherCallback.bind(this), // callback to make when return is pressed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//                                               maxFieldLen,                     // integer, max number of characters allowed in field&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//                                               intOnly);                        // boolean, true of only digits can be entered.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.controls.push(this.myField);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// To add a textbox:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   	this.myCheckbox = addCheckboxToAlgorithmBar(&quot;Checkbox Label&quot;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//      this.myCheckbox.onclick = this.checkboxCallback.bind(this);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//      this.controls.push(myCheckbox);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// To add a radio button group:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//	  this.radioButtonList = addRadioButtonGroupToAlgorithmBar([&quot;radio button label 1&quot;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//                                                              &quot;radio button label 2&quot;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//                                                              &quot;radio button label 3&quot;],&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//                                                             &quot;MyButtonGroupName&quot;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.radioButtonList[0].onclick = this.firstRadioButtonCallback.bind(this);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.controls.push(this.radioButtonList[0]);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.radioButtonList[1].onclick = this.secondRadioButtonCallback.bind(this);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.controls.push(this.radioButtonList[1]);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.radioButtonList[2].onclick = this.thirdRadioButtonCallback.bind(this);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//    this.controls.push(this.radioButtonList[1]);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note that we are adding the controls to the controls array so that they can be enabled / disabled&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// by the animation manager (see enableUI / disableUI below)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매서드를 리셋하기 위한 “override” 가 필요합니다. 애니메이션 매니저가 undo 작업을 할 때 마다 아래와 같은 작업을 수행합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이 리셋 매서드가 호출된다. 이 매서드는 해당 오브젝트의 상태를 리셋합니다. 정확히는 해당 작업이 수행되기 전으로 되돌립니다.&lt;/li&gt;
  &lt;li&gt;마지막에 진행되었던 모든 작업을 포함한다.(애니메이션 정보가 삭제되어도 상관없습니다.)&lt;/li&gt;
  &lt;li&gt;우리가 수행했던 마지막 작업 바로 전의 상태로 되돌리고 종료된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset all of your data structures to *exactly* the state they have immediately after the init&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// function is called.  This method is called whenever an &quot;undo&quot; is performed.  Your data&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// structures are completely cleaned, and then all of the actions *up to but not including* the&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// last action are then redone.  If you implement all of your actions through the &quot;implementAction&quot;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// method below, then all of this work is done for you in the Animation &quot;superclass&quot;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Reset the (very simple) memory manager&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;콜백 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Callbacks:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   All of your callbacks should *not* do any work directly, but instead should go through the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   implement action command.  That way, undos are handled by ths system &quot;behind the scenes&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   A typical example:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//MyAlgorithm.prototype.insertCallback = function(event)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// Get value to insert from textfield (created in addControls above)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	var insertedValue = this.insertField.value;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  // If you want numbers to all have leading zeroes, you can add them like this:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	insertedValue = this.normalizeNumber(insertedValue, 4);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  // Only do insertion if the text field is not empty ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	if (insertedValue != &quot;&quot;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//		// Clear text field after operation&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//		this.insertField.value = &quot;&quot;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      // Do the actual work.  The function implementAction is defined in the algorithm superclass&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//		this.implementAction(this.insertElement.bind(this), insertedValue);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Note that implementAction takes as parameters a function and an argument, and then calls that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  function using that argument (while also storing the function/argument pair for future undos)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Doing actual work&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   The functions that are called by implementAction (like insertElement in the comments above) need to:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      1. Create an array of strings that represent commands to give to the animation manager&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//      2. Return this array of commands&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    We strongly recommend that you use the this.cmd function, which is a handy utility function that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    appends commands onto the instance variable this.commands&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    A simple example:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//MyAlgorithm.simpleAction(input)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	this.commands = [];  // Empty out our commands variable, so it isn't corrupted by previous actions&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// Get a new memory ID for the circle that we are going to create&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	var circleID = nextIndex++;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	var circleX = 50;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	var circleY = 50;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// Create a circle&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	this.cmd(&quot;CreateCircle&quot;, circleID, &quot;Label&quot;,  circleX, circleY);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	circleX = 100;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// Move the circle&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	this.cmd(&quot;Move&quot;, circleID, circleX, circleY);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// First Animation step done&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	this.cmd(&quot;Step&quot;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	circleX = 50;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	circleY = 100;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// Move the circle again&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	this.cmd(&quot;Move&quot;, circleID, circleX, circleY);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// Next Animation step done&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	this.cmd(&quot;Step&quot;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	// Return the commands that were generated by the &quot;cmd&quot; calls:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	return this.commands;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;UI 사용/사용안함&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Called by our superclass when we get an animation started event -- need to wait for the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// event to finish before we start doing anything&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disableUI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called by our superclass when we get an animation completed event -- we can&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// now interact again.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enableUI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;시작 스크립트&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Script to start up your function, called from the webapge:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentAlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animManag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;currentAlg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyAlgorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animManag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;animation-commands&quot;&gt;Animation Commands&lt;/h2&gt;
&lt;p&gt;사용자가 애니메이션 매니저에게 전달하는 명령어는 문자열 리스트(배열) 입니다. 각 문자열은 명령어의 이름(대소문자 구분 안 함)과 함께 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;;&amp;gt;&lt;/code&gt; 토큰으로 구분된 매개변수 리스트로 시작합니다. 명령어의 첫 번째 매개변수의 대부분은 생성하거나 접근할려는 오브젝트의 ID 입니다. 예를들어, 오브젝트 ID 37 을 (100, 200) 위치로 이동하는 문자열은 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;Move&amp;lt;;&amp;gt;37&amp;lt;;&amp;gt;100&amp;lt;;&amp;gt;120&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;명령어는 두 그륩으로 분리됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;애니메이션 오브젝트를 만드는 명령어&lt;/li&gt;
  &lt;li&gt;이미 만들어진 오브젝트를 조작하는 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;object-creation-and-deletion-commands&quot;&gt;Object Creation and Deletion Commands&lt;/h3&gt;
&lt;p&gt;오브젝트 생성 명령어의 첫 번째 매개변수는 생성할 오브젝트의 인덱스를 나타내는 정수를 사용합니다. 이 정수 번호는 현재 시스템에서 활성화중인 다른 오브젝트 번호와 중복되어선 안됩니다.(오브젝트가 삭제가 된다면 삭제된 오브젝트의 번호는 재사용을 할 수 있습니다.) 해당 명령어 역시 다른 모든 명령어와 같이, 필수 매개변수와 옵션 매개변수를 가집니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CreateCircle: objectID, label, [initial_x, initial_y]
    &lt;ul&gt;
      &lt;li&gt;objectID: ID 번호는 음수가 아닌 정수여야 하고, 다른 활성화된 ID 번호와 중복이 되어서는 안됩니다. 그리고 성능을 위해 가능한 ID 번호의 크기가 작은 것이 좋습니다.&lt;/li&gt;
      &lt;li&gt;label: 원에 나타날 데이터입니다. 이 데이터는 원 중앙에 표시되고, 문자열이라면 개행 문자(\n)를 사용할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;initial_x: (optional, defaults to 0) 원의 초기 x 좌표&lt;/li&gt;
      &lt;li&gt;initial_y: (optional, defaults to 0) 원의 초기 y 좌표&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CreateRectange: objectID, label, width, height, [initial_x, initial_y, xJustify, yJustufy, backgroundColor, foregroundColor]
    &lt;ul&gt;
      &lt;li&gt;objectID: ID 번호는 음수가 아닌 정수여야 하고, 다른 활성화된 ID 번호와 중복이 되어서는 안됩니다. 그리고 성능을 위해 가능한 ID 번호의 크기가 작은 것이 좋습니다.&lt;/li&gt;
      &lt;li&gt;label: 사각형에 나타날 데이터입니다. 이 데이터는 사각형 중앙에 표시되고, 문자열이라면 개행 문자(\n)를 사용할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;width: 사각형의 넓이(pixel 단위)&lt;/li&gt;
      &lt;li&gt;height: 사각형의 높이(pixel 단위)&lt;/li&gt;
      &lt;li&gt;initial_x: (optional, defaults to 0) 사각형의 초기 x 좌표&lt;/li&gt;
      &lt;li&gt;initial_y: (optional, defaults to 0) 사각형의 초기 y 좌표&lt;/li&gt;
      &lt;li&gt;xJustify: (optional, defaults to “center”) 중앙, 오른쪽, 왼쪽 중 위치를 선택할 수 있고 만약 사각형 위치가 (x, y) 이라면, x 는 선택된 위치에 나타납니다.&lt;/li&gt;
      &lt;li&gt;yJustify: (optional, defaults to “center”). 중앙, 위, 아래 중 위치를 선택할 수 있고 만약 사각형 위치가 (x, y) 이라면, x 는 선택된 위치에 나타납니다.&lt;/li&gt;
      &lt;li&gt;foregroundColor: HTML 색상의 문자열 표시(“빨간색인 경우 #FF0000”, 녹색인 경우 “#00FF00” 등)를 사용하여 사각형의 전경색(foreground)을 나타내는 초기 색. 기본값: 검은색&lt;/li&gt;
      &lt;li&gt;backgroundColor: HTML 색상의 문자열 표시(“빨간색인 경우 #FF0000”, 녹색인 경우 “#00FF00” 등)를 사용하여 사각형의 배경을 나타내는 초기 색. 기본값: 흰색&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CreateHighlightCircle: objectID, color, [initial_x, initial_y, radius]
A highlight circle 은 다른 물체(object) 를 가리지 않기 위해 위해 일반 원과 달리 label과 배경색이 없습니다.
    &lt;ul&gt;
      &lt;li&gt;objectID: ID 번호는 음수가 아닌 정수여야 하고, 다른 활성화된 ID 번호와 중복이 되어서는 안됩니다. 그리고 성능을 위해 가능한 ID 번호의 크기가 작은 것이 좋습니다.&lt;/li&gt;
      &lt;li&gt;color: HTML 색상 표기를 사용한 원의 초기 색&lt;/li&gt;
      &lt;li&gt;initial_x: (optional, defaults to 0) 원의 초기 x 좌표&lt;/li&gt;
      &lt;li&gt;initial_y: (optional, defaults to 0) 원의 초기 y 좌표&lt;/li&gt;
      &lt;li&gt;radius: (optional, defaults to 20) 원의 반지름&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CreateLabel: objectID, label, [initial_x, initial_x, centered]
    &lt;ul&gt;
      &lt;li&gt;objectID: ID 번호는 음수가 아닌 정수여야 하고, 다른 활성화된 ID 번호와 중복이 되어서는 안됩니다. 그리고 성능을 위해 가능한 ID 번호의 크기가 작은 것이 좋습니다.&lt;/li&gt;
      &lt;li&gt;label:라벨에 나타날 데이터. 문자열이라면 개행 문자(\n)를 사용할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;initial_x: (optional, defaults to 0) 라벨의 초기 x 좌표&lt;/li&gt;
      &lt;li&gt;initial_y: (optional, defaults to 0) 라벨의 초기 y 좌표&lt;/li&gt;
      &lt;li&gt;centered: (optional, defaults to true) true(1) 값이라면 중앙에, false(0) 값이면 중앙에 있지 않습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CreateLinkedList: objectID, label, width, height, [initial_x, initial_y, linkPercent, verticalOrientation, linkPosEnd, numLabels]
    &lt;ul&gt;
      &lt;li&gt;objectID: ID 번호는 음수가 아닌 정수여야 하고, 다른 활성화된 ID 번호와 중복이 되어서는 안됩니다. 그리고 성능을 위해 가능한 ID 번호의 크기가 작은 것이 좋습니다.&lt;/li&gt;
      &lt;li&gt;label: 연결된 리스트 원소 내의 레이블(또는 두 개 이상의 레이블이 있는 경우, 그 중 첫 번째 레이블)&lt;/li&gt;
      &lt;li&gt;width: 연결된 리스트 원소의 넓이(pixel 단위)&lt;/li&gt;
      &lt;li&gt;height: 연결된 리스트 원소의 높이(pixel 단위)&lt;/li&gt;
      &lt;li&gt;initial_x: (optional, defaults to 0) 연결된 리스트 원소의 초기 x 좌표&lt;/li&gt;
      &lt;li&gt;initial_y: (optional, defaults to 0) 연결된 리스트 원소의 초기 y 좌표&lt;/li&gt;
      &lt;li&gt;linkPercent: (optional, defaults to 0.25) The percentage of the linked list element that the outgoing pointer takes up.&lt;/li&gt;
      &lt;li&gt;verticalOrientation: (optional, defaults to true). Should the linked list element be vertial (true) or horizontal (false)&lt;/li&gt;
      &lt;li&gt;linkPosEnd: (optional, defaults to false). Should the poiner appear at the bottom or left of the linked list element (true), or the top or right of the linked list element (false)&lt;/li&gt;
      &lt;li&gt;numLabels: (optional, defaults to 1). The number of labels that the linked lists element can hold. See the adjacency list implementat of a graph visualization for an example of a linked list element with more than 1 label.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CreateBTreeNode: objectID, widthPerLabel, height, numLabels, inital_x, initial_y, backgroundColor, foregroundColor
Somewhat special-purpose animated object created for B-Trees. Single rectangle containing any number of labels, with no dividing lines between the labels. Edges can be attached between each label, and to the left of the leftmost label, and to the right of the rightmost label. See the BTree and B+ Tree visualizations for examples.
    &lt;ul&gt;
      &lt;li&gt;objectID: Non-negative integer that represents the ID of this object. Must be different from any ID currently active. Should be as small as posslbe for better performance.&lt;/li&gt;
      &lt;li&gt;widthPerLabel: The width of the B-Tree node is the number of labels * the width per label. Value is in pixels.&lt;/li&gt;
      &lt;li&gt;height: Height of the B-Tree node in pixels&lt;/li&gt;
      &lt;li&gt;numLabels: The number of labels in the BTree node.&lt;/li&gt;
      &lt;li&gt;initial_x: The initial x position of the B-Tree node&lt;/li&gt;
      &lt;li&gt;initial_y: The initial y position of the B-Tree node&lt;/li&gt;
      &lt;li&gt;backgroundColor: The initial color of the background of the rectangle, using HTML colors (#FF0000 for red, #00FF00 for green, and so on)&lt;/li&gt;
      &lt;li&gt;backgroundColor: The initial color of the forground of the rectangle, using HTML colors (#FF0000 for red, #00FF00 for green, and so on)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Delete: objectID
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to delete. All edges incident on this object will be removed. (If the delete is undone, then all such edges will be restored). Once an Animated Element has been deleted, its ID is free to be used again. Note that overly complicated ID management (which is really memory management, since IDs are just indicies into a “memory array” of active animated objects) is not necessarily recommended, since it can lead to some subtle bugs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 사용중인 objectID 를 생성하려고 하거나 현재 존재하지 않는 objectID 를 삭제하려고 하면 오류가 발생한다.&lt;/p&gt;

&lt;h3 id=&quot;object-manipulation-commands&quot;&gt;Object Manipulation Commands&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Move: objectID, toX, toY
Move the object smoothly over the next step from the current position to the new position
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to move. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;toX: The new X location to move to&lt;/li&gt;
      &lt;li&gt;toY: The new Y location to move to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetPosition: objectID, toX, toY
Move the object immediately to the new position at the beginning of the next step
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to move. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;toX: The new X location to move to&lt;/li&gt;
      &lt;li&gt;toY: The new Y location to move to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetForegroundColor: objectID, color
Sets the foreground color (outline color and label color) of an object. Note that if an object has several labels this will set the color of all labels.&lt;/li&gt;
  &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
  &lt;li&gt;color: New foreground color (string representing HTML color, like “#ff0000”)&lt;/li&gt;
  &lt;li&gt;SetBackgroundColor: objectID, color
Sets the background color of current object. Note that if an object has several labels this will set the color of an object.
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exist, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;color: New background color&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetHighlight: objectID, highlightVal
Mark an object as either highlighted or unhighlighted, based on the value of highlightVal. Objects that are highlighted will pulse red. Any object can be highlighted (thought labels are slightly harder to read when highlighted) Note that if an object is left highlighted after an animation is ended, it will not pulse until the animation starts again. Edges can be highlighted using the highlight edge command.
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;highlightVal: 1 or true, turn on highlighting. 0 or false, turn off highlighting.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetText: objectID, newText, [textIndex]
Sets the value of the label associated with the object (the printing withing a circle, for instance).
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;newText: The new text of the label&lt;/li&gt;
      &lt;li&gt;textIndex: (optional, defaults to 0) Index of the text label to change. Only used in objects that have more than one text label (B-Tree nodes, Linked List nodes). If the object does not support multiple labels, this is ignored.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetAlpha: objectID
Sets the alpha (transparency) of the object. 0 is completely transparent, 1 is completely opaque. Works for all objects.
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetHeight: objectID, newHeight
Sets the height (in pixels) of the object.
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;newHeight: The new height of the object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetWidth: objectID, newWIdth
Sets the width (in pixels) of the object.
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;newWidth: The new width of the object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetTextColor: objectID, newColor, [textIndex]
Sets the color of the label associated with the object
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;newColor: The new color to set. As with all colors, should be a html color string&lt;/li&gt;
      &lt;li&gt;textIndex: (optional, defaults to 0) If the object contain multiple labels (such as a linked-list node, or a B-Tree node) determine which label to change the color of. If the object only has one label, this parameter is ignored.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetNull: objectID, nullValue
Currently only used for linked-list elements. Should the area set aside for the pointer in the linked list object be drawn as a null pointer (slash through the field)? This should probably be automated (draw the slash if and only if the node is not connected to anything), but for now this must be done manually.
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;nullValue: 0 or false for do not draw the slash, 1 or true for draw the slash.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetNumElements: objectID, numElements
Currently only used for B-Tree nodes. Changes the number of labels stored in this B-tree node. Should probably be extended to at least Linked-list nodes.
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;numElements: integer, the number of elements this B-Tree node should have&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AlignRight: object1ID, object2ID
Align object1 so that it is immediately to the right of object2. Very handy for lining up labels (where you don’t necessarily know the width of the label), but can be used with any two objects.
    &lt;ul&gt;
      &lt;li&gt;object1ID: The ID of the object to move. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AlignLeft: object1ID, object2ID
Align object1 so that it is immediately to the left of object2. Very handy for lining up labels (where you don’t necessarily know the width of the label), but can be used with any two objects.
    &lt;ul&gt;
      &lt;li&gt;object1ID: The ID of the object to move. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AlignTop: object1ID, object2ID
Align object1 so that it is immediately on top of of object2. Very handy for lining up labels (where you don’t necessarily know the width of the label), but can be used with any two objects.
    &lt;ul&gt;
      &lt;li&gt;object1ID: The ID of the object to move. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AlignBottom: object1ID, object2ID
Align object1 so that it is immediately below object2. Very handy for lining up labels (where you don’t necessarily know the width of the label), but can be used with any two objects.
    &lt;ul&gt;
      &lt;li&gt;object1ID: The ID of the object to move. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;edge-manipulation-commands&quot;&gt;Edge Manipulation Commands&lt;/h3&gt;
&lt;p&gt;Edge 명령어는 edge 를 가진 두 연관된 오브젝트를 조작합니다. Edge 들은 그래픽적으로 방향이 있을 수도 없을 수도 있지만, 후드(hood) 아래에 있는 모든 edge 들은 방향을 가집니다. 그리고 이 방향은 edge가 생성될 때 주어집니다. 한 오브젝트에서 다른 오브젝트로 가는 단 하나의 edge 만 있을 수 있습니다.(오브젝트1 에서 오브젝트2 까지와 오브젝트2 에서 오브젝트 1까지 서로 다른 edge 입니다.) Edge 들은 항상 두 오브젝트 ID(시작 오브젝트 ID, 끝 오브젝트 ID) 에 의해 수행됩니다. 오브젝트는 항상 다른 오브젝트와 연결될 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect: fromID, toID, [linkColor, curve, directed, label, anchorPosition]
    &lt;ul&gt;
      &lt;li&gt;fromID: The ID of the object at the tail of the new edge&lt;/li&gt;
      &lt;li&gt;toID: The ID of the object at the head of the new edge&lt;/li&gt;
      &lt;li&gt;linkColor: (optional, defaults to “#000000”) The color of the edge&lt;/li&gt;
      &lt;li&gt;linkColor: (optional, defaults to false) true for a diected edge, false for an undirected edge&lt;/li&gt;
      &lt;li&gt;curve: (optional, defaults to 0.0) The “curviness” of the edge. 0.0 is perfectly straight, positive values arc to the right, negative values arc to the left.&lt;/li&gt;
      &lt;li&gt;directed: (optional, defaults to true). True if the edge is directed, false if the edge is undirected&lt;/li&gt;
      &lt;li&gt;label: (optional, defaults to “”). The label that appears along the edge (useful for things like edge costs in graphs)&lt;/li&gt;
      &lt;li&gt;anchorPosition: (optional, defaults to 0) If the edge could have more than one attachment postion at the “from” node, (currently only used for B-Tree nodes, but could well be expanded to things like doubly-linked lists) the index of the attachment position to use. Ignored for animated objects that do not have multiple attachment positions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Disconnect: fromID, toID
Removes an edge between two elements. If there is no edge, then this operation is a no-op.
    &lt;ul&gt;
      &lt;li&gt;fromID: The ID of the “From” direction of the edge&lt;/li&gt;
      &lt;li&gt;toID: The ID of the “To” direction of the edge
Note that even “undirected” edges have a “from” and a “to” – determined by how the edge was created using the Connect command.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetAlpha: objectID
Sets the alpha (transparency) of the object. 0 is completely transparent, 1 is completely opaque
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SetEdgeHighlight: fromID, toID, highlightVal
Mark an edge as either highlighted or unhighlighted, based on the value of highlightVal. Edges that are highlighted will pulse red.
    &lt;ul&gt;
      &lt;li&gt;fromID: The ID of the “From” direction of the edge&lt;/li&gt;
      &lt;li&gt;toID: The ID of the “To” direction of the edge&lt;/li&gt;
      &lt;li&gt;higlightVal: 0 or false, turn of higlighting. 1 or true, turn on highlighting.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;special-commands&quot;&gt;Special Commands&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Step: &lt;No parameters=&quot;&quot;&gt;
The step command allows you to keep everything from happening at once. The way that most animations will work is that you will create a group of objects, then do a step, then do some movements, then do a step, then do more movements, then do a step, and so on. All commands that appear between adjacent steps will happen simultaneously. Each step represents where the animation will pause when it is in single-step mode.&lt;/No&gt;&lt;/li&gt;
  &lt;li&gt;SetLayer objectID, newLayer
Sets the layer of the object. All objects default to layer 0, and the “shown” layer always defaults to 0. You can change the layers of different objects, and then change the list of which layers are currently shown, to show or hide objects dynamically. (This is often useful for allowing the user to show or hide information, or to alternate between different versions of a representation). An object will only appear if its layer is one of the layers listed to be shown. An edge will only appear of each of the objects that it connect are to be shown. While commands cannot be executed while an animation is running, the global set of visible layers can be changed while an animation is running
    &lt;ul&gt;
      &lt;li&gt;objectID: The ID of the object to modify. The object must exists, or an exception will be thrown&lt;/li&gt;
      &lt;li&gt;layer: The new layer for this object. Each object must live in one and only one layer (though any combination of layers can be shown at any given time)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;simple-stack-example&quot;&gt;Simple Stack Example&lt;/h2&gt;
&lt;p&gt;이제는 정상적으로 수행되는 예제를 볼 것입니다. 간단한 스택(stack) 시각화 예제가 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AlgorithmLibrary/SimpleStack.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.usfca.edu/~galles/visualization/SimpleStack.html&quot;&gt;실행 결과&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래는 초기화 작업을 수행하는 코드중 일부입니다. 시각화 자바스크립트의 시작은 아래의 코드와 같고 이는 언제든지 원하는 기능의 함수로 대체할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superclass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 SimpleStack에서 사용하는 상수의 모습입니다. 심볼의 충돌을 피하기 위해 함수의 네임스페이스를 사용하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ELEMENT_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ELEMENT_HEIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INSERT_X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INSERT_Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STARTING_X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STARTING_Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FOREGROUND_COLOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#000055&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BACKGROUND_COLOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#AAAAFF&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 생성자입니다. 기술적으로, 생성자는 아래와 같이 맨 처음에 위치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function SimpleStack( ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나, 해당 생성자는 초기화 작업만을 수행합니다. – 이 방법은 서브 클래스의 생성자들은 효율적으로 그들의 슈퍼 클래스의 생성자들을 호출할 수 있습니다. 이 경우의 초기화 함수를 위해서 간단한 작업이 필요합니다. 이 예제에서는 로드(load) 시간동안 캔버스(canvas)에 어떠한 요소도 추가하지 않습니다. 개발자가 해야할 일은 해당 내부 자료 구조를 설정하는 것뿐입니다. 시스템은 두 배열(실제 스택을 저장하는 배열(stackValues), 스택 요소의 오브젝트 ID를 저장하는 배열(stackID))의 추적을 유지합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Call the unit function of our &quot;superclass&quot;, which adds a couple of&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// listeners, and sets up the undo stack&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addControls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Useful for memory management&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 알고리즘 컨트롤과 콜백 함수를 추가하는 매서드입니다. 아래는 어쩔 수 없이 복잡하게 구현한 부분입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.popButton.onclick = this.popCallback
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이는 콜백 함수를 추가하는 부분입니다. 이것은 함수를 정상적으로 전달하지만, 정상적인 문맥은 전달하지 못합니다. – 기본적으로 이것은 “this” 포인터를 저장하지 않고 함수의 포인터를 넘겨주고 있습니다. 그래서 “this” 포인터를 저장하기 전에 해당 함수에 “this” 포인터를 바인드(bind) 해주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addControls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addControlToAlgorithmBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onkeydown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
                                               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// callback to make when return is pressed&lt;/span&gt;
                                               &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;// integer, max number of characters allowed in field&lt;/span&gt;
                                               &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;// boolean, true of only digits can be entered.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addControlToAlgorithmBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Push&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addControlToAlgorithmBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고로 바인딩 하는 함수는 CustomEvents.js 파일에 구현되어 있고, 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 리셋 함수입니다. 모든 시각화는 리셋 매서드를 구현해야 합니다. 이 리셋 매서드는 init 함수를 호출한 직후에 모든 변수를 원래 상태로 되돌려야 합니다. 이 에제에서는 오직 2개의 중요한 변수를 가지고 있습니다. 여기서 stackID 와 stackValues 배열을 다시 만들 수 있지만, 이 경우에는 그럴 필요성이 없습니다. 왜냐하면, 두 배열의 현재 값에 대해 신경 쓸 필요가 없기 때문입니다. – 스택의 top 값이 0인 경우에는 이를 읽기전에는 어떤 값이라도 쓸 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Reset the (very simple) memory manager.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//  NOTE:  If we had added a number of objects to the scene *before* any user&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//         input, then we would want to set this to the appropriate value based&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//         on objects added to the scene before the first user input&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Reset our data structure.  (Simple in this case)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 콜백입니다. 개발자는 콜백 함수에 대해 직접적으로 어떠한 작업도 할 필요가 없습니다. – 대신에, implementAction 매서드를 사용합니다. 이 매서드는 bound 함수(bind 매서드를 사용하는)와 한 매개변수를 가지고 와서, 이 매개변수를 사용하는 함수를 호출합니다. implementAction 은 또한 현재까지 수행되었던 모든 action 의 리스트를 저장합니다. 이로 인해 쉽게 undo 작업을 수행할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pushedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;implementAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pushedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;implementAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마지막으로, 지금부터는 시각화를 위한 핵심 코드입니다. – 이 예제 코드는 잘 동작합니다. 대부분 action 을 구현하고 있고, 웹상에 무엇을 하고 있는지 기록하기 위해 cmd 호출을 사용하고 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CreateRectangle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			                    &lt;span class=&quot;nx&quot;&gt;pushedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
								&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ELEMENT_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
								&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ELEMENT_HEIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
								&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INSERT_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			                    &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INSERT_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SetForegroundColor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FOREGROUND_COLOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SetBackgroundColor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BACKGROUND_COLOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Step&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextXPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STARTING_X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ELEMENT_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextYPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STARTING_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextXPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextYPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Step&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not necessary, but not harmful either&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INSERT_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INSERT_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Step&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Delete&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stackTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Step&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// OPTIONAL:  We can do a little better with memory leaks in our own memory manager by&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//            reclaiming this memory.  It is recommened that you *NOT* do this unless&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//            you really know what you are doing (memory management leads to tricky bugs!)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//            *and* you really need to (very long runnning visualizaitons, not common)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//            Because this is a stack, we can reclaim memory easily.  Most of the time, this&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//            is not the case, and can be dangerous.&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// nextIndex = this.stackID[this.stackTop];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재까지 대부분이 완성되었습니다. 아래는 애니메이션이 작동하는 동안 알고리즘 컨트롤을 enable/disable 하는 코드입니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Called by our superclass when we get an animation started event -- need to wait for the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// event to finish before we start doing anything&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disableUI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called by our superclass when we get an animation completed event -- we can&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// now interact again.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enableUI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;알고리즘 시각화를 구현하기 위해 SimpleStack 코드에서 필요한 부분을 만들거나 수정하고, 불필요한 부분을 삭제할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Script to start up your function, called from the webapge:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;////////////////////////////////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentAlg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animManag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;currentAlg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animManag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;html-template&quot;&gt;HTML Template&lt;/h2&gt;
&lt;p&gt;이 시각화 시스템은 HTML과 자바스크립트의 조합입니다. 이를 위해 자바스크립트를 삽입할 웹 페이지가 필요하고, 웹 페이지는 아래와 같은 요소들이 필요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 필요한 스크립트 파일들을 로드하기 위해 헤더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 테그를 추가한다. 이 파일들은 의존도(dependency)에 따라 정확한 순서대로 include 되어야 한다.(자바스크립트가 HTML에 이 모든 파일을 수동으로 삽입하는 것을 방지하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt; 와 같은 표준 메커니즘을 가지고 있다면 좋을 것입니다. 하지만 그 주변에 자바스크립트 호출을 사용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그를 동적으로 삽입하는 몇 가지 방법이 있지만 모든 브라우저가 이러한 다소 복잡한 방법으로 동작하지는 않습니다. 순서가 정확하다면, 모든 파일의 탐색은 어디서든 작동할 것입니다.)&lt;/li&gt;
  &lt;li&gt;알고리즘별 컨트롤을 위치시킬 “algoControlSection” id가 포함된 빈 테이블&lt;/li&gt;
  &lt;li&gt;애니메이션을 표현할 &lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt; element&lt;/li&gt;
  &lt;li&gt;일반적인 애니메이션 컨트롤을 위치시킬 “GeneralAnimationControls” id가 포함된 빈 테이블&lt;/li&gt;
  &lt;li&gt;시각화를 시작하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 테그에서의 속성 &lt;code class=&quot;highlighter-rouge&quot;&gt;onload = &quot;init()&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가장 쉬운 방법은 template.html 파일의 템플릿을 사용하여, 필요에 맞게 값을 바꾸는 것입니다.&lt;/p&gt;

&lt;p&gt;아래는 template.html 의 코드이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Place ...&lt;/code&gt; 이 부분을 필요에 맞게 변경할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
           Place your title here
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- css sheet for how the page is laid out --&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;visualizationPageStyle.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;


        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- jqueury stuff.  Only used for the animation speed slider. --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ThirdParty/jquery-ui-1.8.11.custom.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ThirdParty/jquery-1.5.2.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ThirdParty/jquery-ui-1.8.11.custom.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Javascript for the actual visualization code --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/CustomEvents.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/UndoFunctions.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/AnimatedObject.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/AnimatedLabel.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/AnimatedCircle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/AnimatedRectangle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/AnimatedLinkedList.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/HighlightCircle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/Line.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/ObjectManager.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AnimationLibrary/AnimationMain.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AlgorithmLibrary/Algorithm.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Place path to your javascript file here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init();&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VisualizationMainPage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Place your Header here &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mainContent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;algoControlSection&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Table for buttons to control specific animation (insert/find/etc) --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- (filled in by javascript code specific to the animtion) --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AlgorithmSpecificControls&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Drawing canvas where all animation is done.  Note:  can be resized in code --&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1000&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;

                &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;generalAnimationControlSection&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Table for buttons to control general animation (play/pause/undo/etc) -&amp;gt;
                    &amp;lt;!-- (filled in by javascript code, specifically AnimationMain.js)  --&amp;gt;&lt;/span&gt;

                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GeneralAnimationControls&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;     
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- mainContent --&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Algorithms.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Algorithm Visualizations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- container --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;quicks-and-advanced-techniques&quot;&gt;Quicks and Advanced Techniques&lt;/h2&gt;

&lt;h3 id=&quot;object-display-order&quot;&gt;Object Display Order&lt;/h3&gt;
&lt;p&gt;만약 2개의 오브젝트가 겹친다면, 아래의 규칙에 따라 어느 오브젝트가 위에 그려질지 순서가 정해집니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;non-highlighted 모든 아이템들은 highlighted 아이템들 전에 그려진다.(그래서 highlighted 아이템은 non-highlighted 아이템 위에 나타납니다.)&lt;/li&gt;
  &lt;li&gt;같은 highlight 상태의 모든 아이템들은 식별자 번호(id) 순서대로 그려진다.(id 번호가 큰 오브젝트가 id 번호가 작은 오브젝트 앞에 그려질 것입니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 시스템은 그리 정교하지는 않지만, 충분히 잘 동작합니다. 만약 오브젝트 A 가 오브젝트 B 앞에 나타나길 원한다면, 오브젝트 A의 id 번호가 B보다 커야합니다. 그리고 더 정교한 시스템을 원하다면, 미래에 수정된 버전이 나올 수도 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;
&lt;p&gt;자바스크립트를 개발하고 있다면 Firebug는 자바스크립트 디버거로서 매우 괜찮습니다.(무료) 그러나 이 프로그램은 breakpoint(중단점) 에 대한 문제가 있습니다. 이 시스템의 애니메이션은 자바스크립트 setTimeout 명령에 크게 의존합니다. 시간초과(timeout)후에 Firebug의 중단점에 도달하면 시간초과가 손실될 것입니다. 잘못된 코드 부분에 중단점을 설정한다면 애니메이션이 중단될 수 있습니다.&lt;/p&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Toy_jsdsLib" /><summary type="html">자료구조 시각화 오픈소스 튜토리얼</summary></entry><entry><title type="html">[jsdsLib]jsDelivr</title><link href="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-jsDeliver/" rel="alternate" type="text/html" title="[jsdsLib]jsDelivr" /><published>2019-01-03T00:00:00+09:00</published><updated>2019-01-03T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-%5BjsdsLib%5DjsDeliver</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-jsDeliver/">&lt;p&gt;이 문서는 jsDelivr 을 사용하는 방법에 대해 번역한 것입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;오타, 잘못된 번역이 많을 수 있습니다. 감안하고 읽어주세요…&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;원문&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jsdelivr/jsdelivr&quot;&gt;jsDelivr 공식 Gitgub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;공식 사이트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jsdelivr.com/&quot;&gt;https://www.jsdelivr.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jsdelivr---open-source-cdn&quot;&gt;jsDelivr - Open Source CDN&lt;/h2&gt;
&lt;p&gt;관련 프로젝트:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jsdelivr/data.jsdelivr.com&quot;&gt;jsDelivr API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jsdelivr/www.jsdelivr.com&quot;&gt;jsDelivr website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jsDelivr 관계자들은 도와줄 사람을 찾고 있습니다. 위의 링크(repos)를 열어 이슈를 확인해주세요. 해당 이슈에 관한 아이디어가 있으면 댓글을 달아주시고, 새로운 아이디어가 있다면 새로운 이슈를 만들어주세요.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: jsDelivr 의 백엔드(Back end)가 변경되었습니다. 그에 따라 새로운 jsDelivr 사용방법을 알아야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jsDelivr 은 무료 오픈소스 파일을 위한 무료 CDN 입니다. jsDelivr 은 Github, npm과 밀접하게 통합되어 있습니다. 그러므로 외부의 대부분 오픈소스 프로젝트에 CDN 서비스를 제공할 수 있고, 이 서비스는 자동화되어 있고 신뢰할만합니다.&lt;/p&gt;

&lt;p&gt;jsDelivr 은 엄청난 양의 트래픽을 가지고 있는 인기있는 웹사이트 제작에도 사용할 수 있는 안정적인 CDN 서비스를 제공합니다. jsDelivr 은 대역폭(bandwidth)의 제한이나 프리미엄 기능이 없고, 누구나 자유롭게 사용할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;사용법usage&quot;&gt;사용법(Usage)&lt;/h2&gt;
&lt;p&gt;jsDelivr 은 공공 저장소의 모든 npm 패키지에서 모든 파일을 즉시 서비스 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;npm 으로 배포된 새로운 버전의 패키지 역시 즉시 CDN 을 통해 바로 사용가능합니다. 그리고 사용자 개인의 유지보수를 할 필요가 없습니다.&lt;/p&gt;

&lt;p&gt;만약 패키지나 버전, 파일이 npm 에서 제거된다고 해도 jsDelivr 에서는 어떤 웹사이트에도 영향없이 계속 서비스를 제공합니다. 이는 해당 파일들이 jsDelivr 내부 저장소에 영구적으로 저장되어 있기 때문입니다.&lt;/p&gt;

&lt;h3 id=&quot;npm&quot;&gt;npm&lt;/h3&gt;
&lt;p&gt;배포된 npm 패키지를 불러오기 위한 기본 양식&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/npm/package@version/file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정확한 버전 불러오기&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/npm/jquery@3.1.0/dist/jquery.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;버전의 일부분만 사용하여 불러오기&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/npm/jquery@3/dist/jquery.min.js
/npm/jquery@3.1/dist/jquery.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;태그로 불러오기(추천하지 않음)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/npm/jquery@beta/dist/jquery.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;버전을 완전히 생략하거나 “latest”(가장 최신 버전) 로 불러오기(개발 환경에서만 사용할 것)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/npm/jquery@latest/dist/jquery.min.js
/npm/jquery/dist/jquery.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;미니 버전이 없는 경우 js/css 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.min&lt;/code&gt; 추가한다면 자동적으로 생성됩니다. 그리고 만들어진 모든 파일들은 소스 맵을 제공하고 개발하는 동안 쉽게 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/npm/github-markdown-css@2.4.1/github-markdown.min.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;github&quot;&gt;GitHub&lt;/h3&gt;
&lt;p&gt;Github release 또는 commit 불러오기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gh/user/repo@version/file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정확한 버전 불러오기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gh/jquery/jquery@3.1.0/dist/jquery.min.js
/gh/jquery/jquery@32b00373b3f42e5cdcb709df53f3b08b7184a944/dist/jquery.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정확한 버전 대신 버전 범위 불러오기(반드시 유효한 semver 버전을 사용해야함.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gh/jquery/jquery@3/dist/jquery.min.js
/gh/jquery/jquery@3.1/dist/jquery.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;버전을 완전히 생략하거나 “latest”(가장 최신 버전) 로 불러오기(개발 환경에서만 사용할 것)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gh/jquery/jquery@latest/dist/jquery.min.js
/gh/jquery/jquery/dist/jquery.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;미니 버전이 없는 경우 js/css 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.min&lt;/code&gt; 추가한다면 자동적으로 생성됩니다. 그리고 만들어진 모든 파일들은 소스 맵을 제공하고 개발하는 동안 쉽게 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gh/sindresorhus/github-markdown-css@v2.4.1/github-markdown.min.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;디렉토리 리스트 가져오기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/gh/jquery/jquery@3.1.0/
/gh/jquery/jquery@3.1.0/dist/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;예제&quot;&gt;예제&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;npm&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;jsdsLib 패키지 1.1 버전 불러오기&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/jsdslib@1.1/dist/List.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Github&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Github 에서 cdn 서비스를 이용하기 위해서는 먼저, 코드 깃허브에 올리고 버전 태그(lightweight tag)설정한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag [version]&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin [version]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jsdsLib 1.1 버전 불러오기&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/gh/CODEMCD/jsdsLib@1.1/dist/List.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Toy_jsdsLib" /><summary type="html">오픈소스 CDN jsDelivr</summary></entry><entry><title type="html">[jsdsLib]npm 패키지</title><link href="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-npm-%ED%8C%A8%ED%82%A4%EC%A7%80/" rel="alternate" type="text/html" title="[jsdsLib]npm 패키지" /><published>2019-01-03T00:00:00+09:00</published><updated>2019-01-03T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-%5BjsdsLib%5Dnpm%20%ED%8C%A8%ED%82%A4%EC%A7%80</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-npm-%ED%8C%A8%ED%82%A4%EC%A7%80/">&lt;h2 id=&quot;패키지-만들기&quot;&gt;패키지 만들기&lt;/h2&gt;
&lt;p&gt;npm 패키지를 만들기 위해서는 패키지로 만들 디렉토리가 필요하다. 해당 디렉토리 내부에 패키지할 내용들이 들어 있어야 한다. 그리고 cmd 창을 열어 해당 디렉토리로 이동하고 아래의 순서대로 진행하자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;해당 디렉토리를 패키지화 한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; 명령어를 입력하면 package.json 파일을 작성해야한다.
    &lt;ul&gt;
      &lt;li&gt;각 항목에서 보여주는 () 안의 값들은 디폴트 값으로, 입력없이 엔터를 누르면 해당 값으로 설정된다.&lt;/li&gt;
      &lt;li&gt;name: 패키지 이름, 이 이름은 유일해야 한다.&lt;/li&gt;
      &lt;li&gt;version: 패키지 버전&lt;/li&gt;
      &lt;li&gt;description: 패키지에 대한 설명&lt;/li&gt;
      &lt;li&gt;entry point: 패키지를 실행했을 때, 맨 처음 불러오는 파일, package.json 파일에서는 main 으로 표시된다. (일반적으로 main 코드가 있는 파일로 설정한다.)&lt;/li&gt;
      &lt;li&gt;test command: test script 를 실행할 명령어&lt;/li&gt;
      &lt;li&gt;git repository: 해당 패키지를 github 에 저장해두었거나, 저장할 계획이라면 설정한다. (github 에서 clone 받은 프로젝트라면, 자동으로 설정되어 있다.)&lt;/li&gt;
      &lt;li&gt;keywords: 해당 패키지의 태그 역할을 한다. (패키지와 연관된 단어들을 띄어쓰기로 구분하여 입력한다.)&lt;/li&gt;
      &lt;li&gt;author: 패키지 저자&lt;/li&gt;
      &lt;li&gt;license: 패키지에 대한 라이선스, 기본값으로 MIT로 설정되어 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;npm 공식 사이트 로그인
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm adduser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아이디, 비밀번호, 이메일을 입력한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;패키지 배포
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;패키지-업데이트&quot;&gt;패키지 업데이트&lt;/h2&gt;
&lt;p&gt;패키지의 package.json 파일에서 version 을 변경하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt; 명령어를 수행한다. (버전이 같으면 오류가 발생한다.)&lt;/p&gt;

&lt;h2 id=&quot;패키지-사용&quot;&gt;패키지 사용&lt;/h2&gt;
&lt;p&gt;패키지를 사용하기 위해서는 해당 디렉토리 역시 패키지화 해야한다. 패키지화를 하지 않으면 package.json 파일을 찾을 수 없다는 에러가 발생한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;디렉토리 패키지화
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;해당 디렉토리를 다시 패키지화한다면 그에 맞게 package.json 정보를 입력하고, 그렇지 않다면 모두 기본값으로 설정해도 무관하다. (어차피 package.json 파일은 언제든지 수정가능하다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;사용할 패키지 설치
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install 패키지 이름
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;대부분의 패키지는 위의 명령어로 설치할 수 있지만, README.md 파일에서 해당 패키지의 설치 방법을 보고 설치하는 것을 추천한다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;설치 명령어에 &lt;code class=&quot;highlighter-rouge&quot;&gt;--save&lt;/code&gt; 옵션을 추가하면 현재 패키지와 설치한 패키지 사이에 의존성이 생긴다. 현재 패키지를 설치하면 의존성 관계인 패키지가 같이 설치된다. 의존성 관계는 package.json 파일에서 확인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이제 패키지 사용방법에 따라 사용할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;유용한-패키지&quot;&gt;유용한 패키지&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;uglify-js: 해당 자바스크립트 파일에서 필요없는 데이터를 삭제한다.
    &lt;ul&gt;
      &lt;li&gt;띄어쓰기, 탭, 엔터 등을 삭제한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; 플래그를 사용하면 변수 이름을 아주 작은 글자 수로 줄인다.&lt;/li&gt;
      &lt;li&gt;해당 자바스크립트 파일 데이터를 최소화하여 네트워크 효율성을 극대화하기 위해 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;underscore: 자바스크립트에서 부족한 배열, 문자열 등의 매서드를 제공한다.
    &lt;ul&gt;
      &lt;li&gt;통상 &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; 변수를 많이 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-문헌&quot;&gt;참고 문헌&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;생활 코딩 - npm과 모듈&lt;/li&gt;
  &lt;li&gt;http://sanghaklee.tistory.com/34&lt;/li&gt;
  &lt;li&gt;https://blog.outsider.ne.kr/829&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Toy_jsdsLib" /><summary type="html">npm 패키지 만들기, 사용하기 등</summary></entry><entry><title type="html">[jsdsLib]라이브러리 분석</title><link href="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%B6%84%EC%84%9D/" rel="alternate" type="text/html" title="[jsdsLib]라이브러리 분석" /><published>2019-01-02T00:00:00+09:00</published><updated>2019-01-02T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-%5BjsdsLib%5D%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%20%EB%B6%84%EC%84%9D</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/toy/jsdsLib-jsdsLib-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EB%B6%84%EC%84%9D/">&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;
&lt;p&gt;이 라이브러리의 리스트는 doubly linked list 이다. 구현의 편의성을 위해서 head 와 tail 부분에 dummy 노드를 가르키게 하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/50594895-b9d9cd00-0ee1-11e9-9ad1-812c0b35e01d.JPG&quot; alt=&quot;list structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stack&quot;&gt;Stack&lt;/h2&gt;
&lt;p&gt;일반적인 배열 스택이다. 배열의 맨 뒤의 데이터가 삽입, 삭제되므로 시작복잡도는 O(1) 을 보장한다.&lt;/p&gt;

&lt;h2 id=&quot;queue&quot;&gt;Queue&lt;/h2&gt;
&lt;p&gt;배열로 만들어진 큐이다. 큐는 맨 앞의 데이터가 삭제되므로, 일반적인 자바스크립트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;.shift()&lt;/code&gt; 매서드를 사용하면 O(N) 으로 성능이 좋지 않다. 맨 앞의 데이터를 삭제하고 나머지 데이터들을 모두 앞으로 한 칸씩 당겨야하기 때문이다. 이를 개선하기 위해서 맨 앞의 데이터를 삭제하지만, 매번 나머지 데이터들을 앞으로 당기지 않도록 한다. 먼저, 코드를 보자.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeueData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_dataArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_frontIdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_frontIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_dataArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_dataArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_dataArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_frontIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_frontIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dequeueData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위는 실제 라이브러리 &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeue()&lt;/code&gt; 함수 부분이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;_frontIdx&lt;/code&gt; 변수는 배열의 맨 앞의 데이터를 가르킨다. 맨 앞의 데이터를 삭제하고 이 변수를 한 칸 앞으로 옮겨준다. 이러한 수행에서 시간복잡도는 O(1) 이다. 하지만 삽입, 삭제 연산이 늘어날수록 배열의 크기도 계속 늘어나는 단점이 있다. 이를 보완하기 위해 삭제된 데이터 공간이 일정량 쌓이면, 배열 전체를 인덱스가 0인 기준으로 재배치해준다.&lt;/p&gt;

&lt;h2 id=&quot;deque&quot;&gt;Deque&lt;/h2&gt;
&lt;p&gt;Deque(덱, 데크) 는 스택과 큐를 합친 자료구조이다. 여기에 더해 맨 앞에서도 데이터를 추가할 수 있다. 맨 앞의 데이터를 삭제하는 연산을 &lt;code class=&quot;highlighter-rouge&quot;&gt;.shift()&lt;/code&gt; 매서드를 쓰지 않고 좀 더 성능을 개선한 방법은 위의 큐에서 설명하였다. 하지만 맨 앞에 데이터를 추가하는 것 역시 일반적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;.unshift()&lt;/code&gt; 매서드를 사용한다면 성능이 좋지않다. 이를 개선하기 위해 npm 패키지 중 deque 를 구현한 코드를 참고하였다. 아직까지 완전한 이해를 하지 못하여 추후에 좀 더 분석하여 올릴 예정이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;참고 코드: &lt;a href=&quot;https://github.com/petkaantonov/deque/blob/master/src/deque.js&quot;&gt;https://github.com/petkaantonov/deque/blob/master/src/deque.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;priority-queue&quot;&gt;Priority Queue&lt;/h2&gt;
&lt;h3 id=&quot;v110&quot;&gt;V1.1.0&lt;/h3&gt;
&lt;p&gt;우선 순위 큐는 일반적인 heap 를 이용하여 구현하였다. 조금의 성능 개선을 위해 데이터를 삽입 또는 삭제한 후의 다시 heap 배열의 우선 순위를 맞추는 연산에서 실제 데이터 사이 교환(swap)을 하지 않고 인덱스만 저장한다. 그리고 최종 인덱스에 데이터를 저장하는 방식으로 구현되어 있다.&lt;/p&gt;

&lt;h3 id=&quot;v120&quot;&gt;V1.2.0&lt;/h3&gt;
&lt;p&gt;Priority Queue 의 성능 향상을 위해 enqueue(), dequeue() 함수를 변경하였다. 배열 힙을 사용한 것과 삽입, 삭제 알고리즘은 변경하지 않았다. 아래의 링크의 코드를 참조하였고, 변경사항은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;부모, 자식 인덱스 계산을 비트 계산으로 변경하였다.&lt;/li&gt;
  &lt;li&gt;배열 힙의 첫 인덱스를 1에서 0으로 변경하였다.(이 부분에서 큰 시간 차이가 난 것을 툴을 이용해 확인하였다.)&lt;/li&gt;
  &lt;li&gt;데이터 삽입, 삭제시 배열 내부 매서드인 push(), pop() 로 실제 힙의 배열 데이터를 조정한다.&lt;/li&gt;
  &lt;li&gt;참고 코드: &lt;a href=&quot;https://github.com/mourner/tinyqueue&quot;&gt;https://github.com/mourner/tinyqueue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;성능-분석&quot;&gt;성능 분석&lt;/h2&gt;
&lt;p&gt;jsdsLib 의 자료구조의 웹 브라우저에서 성능을 확인하기 위해 간단히 툴을 이용하여 실험해보았다.&lt;/p&gt;

&lt;h3 id=&quot;측정-환경&quot;&gt;측정 환경&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Tool: &lt;a href=&quot;http://jindo.dev.naver.com/jsMatch/about.html&quot;&gt;jsMatch&lt;/a&gt; (네이버 오픈소스, 자바스크립트 성능 측정 도구)&lt;/li&gt;
  &lt;li&gt;브라우저: chrome&lt;/li&gt;
  &lt;li&gt;측정 매서드: 각 자료구조에서 데이터를 삽입, 삭제하는 연산을 측정하였다.
    &lt;ul&gt;
      &lt;li&gt;List: &lt;code class=&quot;highlighter-rouge&quot;&gt;push_front()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pop_front()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Stack: &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Queue: &lt;code class=&quot;highlighter-rouge&quot;&gt;enqueue()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeue()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Deque: &lt;code class=&quot;highlighter-rouge&quot;&gt;unshift()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;shift()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Priority Queue: &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 개수는 각각 삽입 연산, 삭제 연산 분리하여 적용하였다.(예를 들어, 데이터 개수가 100만개라면, 삽입 연산 100만 번, 삭제 연산 100만 번을 수행한다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v110-측정-결과&quot;&gt;V1.1.0 측정 결과&lt;/h3&gt;
&lt;p&gt;v1.1.0 에서 추가한 5가지 자료구조 List, Stack, Queue, Deque, Priority Queue 의 성능을 측정하였다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1,000,000&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5,000,000&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;10,000,000&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;20,000,000&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;List&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.186s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.35s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.711s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.055s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Stack&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.0585s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.22s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.472s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.72s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Queue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.079s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.322s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.458s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.012s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Deque&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.1225s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.638s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.267s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.818s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Priority Queue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.279s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.378s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.838s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.72s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 100만 개 결과: &lt;a href=&quot;http://jindo.dev.naver.com/jsMatch/index.html?d=367&amp;amp;openResult=1&quot;&gt;http://jindo.dev.naver.com/jsMatch/index.html?d=367&amp;amp;openResult=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;데이터 500만 개 결과: &lt;a href=&quot;http://jindo.dev.naver.com/jsMatch/index.html?d=368&amp;amp;openResult=1&quot;&gt;http://jindo.dev.naver.com/jsMatch/index.html?d=368&amp;amp;openResult=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;데이터 1000만 개 결과: &lt;a href=&quot;http://jindo.dev.naver.com/jsMatch/index.html?d=369&amp;amp;openResult=1&quot;&gt;http://jindo.dev.naver.com/jsMatch/index.html?d=369&amp;amp;openResult=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;데이터 2000만 개 결과: &lt;a href=&quot;http://jindo.dev.naver.com/jsMatch/index.html?d=370&amp;amp;openResult=1&quot;&gt;http://jindo.dev.naver.com/jsMatch/index.html?d=370&amp;amp;openResult=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v120-측정-결과&quot;&gt;V1.2.0 측정 결과&lt;/h3&gt;
&lt;p&gt;V1.2.0 에서 변경된 사항은 Priority Queue 의 성능 향상을 위해 enqueue(), dequeue() 함수를 수정하였다. 성능 향상을 확인하기 위해 위에서 사용한 툴을 이용하여 v1.1.0 Priority Queue 와 v1.2.0 Priority Queue 를 비교 수행하였다. 결과는 아래의 표와 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1,000,000&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5,000,000&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;10,000,000&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;20,000,000&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v1.1.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.293s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.456s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.833s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6.454s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v1.2.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.253s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.264s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.437s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.836s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 100만개 결과: &lt;a href=&quot;http://jindo.dev.naver.com/jsMatch/index.html?d=371&amp;amp;openResult=1&quot;&gt;http://jindo.dev.naver.com/jsMatch/index.html?d=371&amp;amp;openResult=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;데이터 개수가 적을 때는 효과가 적지만 데이터가 많아질수록 수행 시간 차이가 커지는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;자바스크립트&quot;&gt;자바스크립트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;특징&lt;/li&gt;
  &lt;li&gt;한계: &lt;a href=&quot;http://huns.me/development/516&quot;&gt;function 내부 private 변수 관련&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Toy_jsdsLib" /><summary type="html">jsdsLib 내부 구조, 성능, 등 분석</summary></entry><entry><title type="html">[Reference]Blog에 post 올리기</title><link href="https://codemcd.github.io/pages/CODEMCD/toy/Blog-Reference-Blog%EC%97%90-post-%EC%98%AC%EB%A6%AC%EA%B8%B0/" rel="alternate" type="text/html" title="[Reference]Blog에 post 올리기" /><published>2018-12-14T00:00:00+09:00</published><updated>2018-12-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/toy/Blog-%5BReference%5DBlog%EC%97%90%20post%20%EC%98%AC%EB%A6%AC%EA%B8%B0</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/toy/Blog-Reference-Blog%EC%97%90-post-%EC%98%AC%EB%A6%AC%EA%B8%B0/">&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;이 자료는 해당 블로그 전용입니다. 다른 블로그와 설정이 다를 수 있씁니다.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;post&quot;&gt;POST&lt;/h2&gt;
&lt;p&gt;Jekyll 블로그에서 post란 일반적으로 블로그에서 쓰는 글이다. 하지만 jekyll에서는 post가 마크다운(Markdown) 으로 작성되고, 기본적으로 몇 가지 규칙이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 post는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 파일안에 있어야 한다.&lt;/li&gt;
  &lt;li&gt;모든 post의 파일 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-TITLE.md&lt;/code&gt; 양식을 따라야한다. 예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;2018-07-15-test.md&lt;/code&gt;로 쓸 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;front-matter&quot;&gt;Front matter&lt;/h2&gt;
&lt;p&gt;Front matter(머리말) 은 jekyll이 마크다운을 해석할 때, 사용하는 메타 정보이다. 이는 반드시 아래와 같이 2가지를 지켜서 사용해야 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;post 가장 맨 첫 부분에 위치해야한다.&lt;/li&gt;
  &lt;li&gt;시작과 끝을 3개의 대쉬(—)로 감싸주어야 한다.
Front matter 은 YAML 형식이고, 비워도 상관없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;front-matter-설정&quot;&gt;Front matter 설정&lt;/h3&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;제목&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excerpt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;설명&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;category1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tag1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sidebar_main&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;use_math&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Front matter 의 예시는 위와 같다. 현재 사용중인 옵션을 모두 보여준 것이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;title: POST의 제목을 나타낸다.&lt;/li&gt;
  &lt;li&gt;excerpt: POST의 간단한 설명을 적는 부분이다.&lt;/li&gt;
  &lt;li&gt;categories: 카테고리를 설정하는 부분이다. 여러 개를 적을 수도 있다.&lt;/li&gt;
  &lt;li&gt;tags: 테그를 설정한다. 카테고리와 같이 여러 개를 적을 수 있다.&lt;/li&gt;
  &lt;li&gt;search: 현재 POST를 검색이 가능하도록 할지 설정하는 부분이다. true 값을 넣으면 해당 POST를 검색할 수 있다.&lt;/li&gt;
  &lt;li&gt;sidebar_main: 현재 POST에서 사이드바를 표시할지 설정하는 부분이다.&lt;/li&gt;
  &lt;li&gt;use_math: 현재 POST에서 MathJax 기능을 사용할지 설정하는 부분이다.&lt;/li&gt;
  &lt;li&gt;toc: POST 맨 첫 부분에 해당 POST의 각 header(‘#’, ‘##’, …)에 바로 가는 기능을 사용할지 설정하는 부분이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;category와-tag&quot;&gt;Category와 Tag&lt;/h2&gt;
&lt;p&gt;현재 블로그 post를 원하는 방식으로 분류하기 위해 카테고리와 테그 설정을 고정적으로 설정하였다. 먼저, 카테고리는 3개로 정하였다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Toy: 토이 프로젝트&lt;/li&gt;
  &lt;li&gt;Algorithm: 알고리즘, PS&lt;/li&gt;
  &lt;li&gt;Study: 각종 프로그래밍 관련 공부&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이, 카테고리는 3개만 가능하고 테그 양식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Category_Tag&lt;/code&gt; 로 사용해야 한다. 예를 들어, 토이 프로젝트의 블로그 개발 관련 post를 작성하였다면 카테고리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toy&lt;/code&gt;, 테그는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Toy_Blog&lt;/code&gt; 와 같이 작성하여야 한다. 실제 블로그에서 테그는 앞의 카테고리는 나타나지 않게 설정하였다. 즉, “Blog” 라는 글자만 볼 수 있다.&lt;/p&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Toy_Blog" /><summary type="html">내 블로그에 post 올리는 방법 정리</summary></entry><entry><title type="html">[Reference]자주쓰는 MathJax 문법</title><link href="https://codemcd.github.io/pages/CODEMCD/toy/Blog-Reference-%EC%9E%90%EC%A3%BC%EC%93%B0%EB%8A%94-MathJax-%EB%AA%85%EB%A0%B9%EC%96%B4/" rel="alternate" type="text/html" title="[Reference]자주쓰는 MathJax 문법" /><published>2018-12-14T00:00:00+09:00</published><updated>2018-12-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/toy/Blog-%5BReference%5D%EC%9E%90%EC%A3%BC%EC%93%B0%EB%8A%94%20MathJax%20%EB%AA%85%EB%A0%B9%EC%96%B4</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/toy/Blog-Reference-%EC%9E%90%EC%A3%BC%EC%93%B0%EB%8A%94-MathJax-%EB%AA%85%EB%A0%B9%EC%96%B4/">&lt;p&gt;블로그 post를 작성할 때, 수학식을 사용해야할 경우가 있었다. 그래서 구글링을 해본 결과 jekyll에서 MathJax를 사용하는 방법이 있었다.&lt;/p&gt;

&lt;h2 id=&quot;mathjax란&quot;&gt;MathJax란?&lt;/h2&gt;
&lt;p&gt;Mathjax는 MathML, LaTeX 및 ASCIIMAthML 마크 업을 사용하여 웹 브라우저에 수학 표기법을 표시하는 크로스 브라우저 JavaScript 라이브러리이다. 그리고 Apache 라이센스에 따라 오픈 소스 소프트웨어이다. (출처: 위키백과)&lt;/p&gt;

&lt;h2 id=&quot;mathjax-사용법&quot;&gt;MathJax 사용법&lt;/h2&gt;
&lt;p&gt;먼저, post에서는 front matter에 &lt;code class=&quot;highlighter-rouge&quot;&gt;use_math: true&lt;/code&gt;를 추가하고 MathJax 양식대로 쓰면 자동으로 렌더링하여 표시해준다.&lt;/p&gt;

&lt;p&gt;MathJax 사용법은 2가지가 있는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;를 수식 앞뒤에 선언해주어야 한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 는 수학식을 문장 사이에 넣을 때 사용하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt; 는 수학식으로 해당 줄을 모두 채우고 싶은 경우에 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;자주쓰는-수식&quot;&gt;자주쓰는 수식&lt;/h2&gt;
&lt;p&gt;자주 사용하는 수학식을 만드는 MathJax를 모아보았다. &lt;code class=&quot;highlighter-rouge&quot;&gt;수식 =&amp;gt; 결과&lt;/code&gt; 로 표현하였다. 수식을 복사하여 위에 설명한 MathJax 사용법대로 선언하여 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;사칙-연산&quot;&gt;사칙 연산&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A + B = C&lt;/code&gt; =&amp;gt; $A + B = C$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A - B = C&lt;/code&gt; =&amp;gt; $A - B = C$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A * B = C&lt;/code&gt; =&amp;gt; $A * B = C$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \times B = C&lt;/code&gt; =&amp;gt; $A \times B = C$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A / B = C&lt;/code&gt; =&amp;gt; $A / B = C$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \div B = C&lt;/code&gt; =&amp;gt; $A \div B = C$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;지수-표현&quot;&gt;지수 표현&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;e^x&lt;/code&gt; =&amp;gt; $e^x$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a_i&lt;/code&gt; =&amp;gt; $a_i$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a_i-1&lt;/code&gt; =&amp;gt; $a_i-1$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a_{i-1}&lt;/code&gt; =&amp;gt; $a_{i-1}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x^2 + 2x + 1&lt;/code&gt; =&amp;gt; $x^2 + 2x + 1$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a_i^2&lt;/code&gt; =&amp;gt; $a_i^2$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a_{i-1}^2x+3&lt;/code&gt; =&amp;gt; $a_{i-1}^2x+3$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a_{i-1}^{2x+3}&lt;/code&gt; =&amp;gt; $a_{i-1}^{2x+3}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{a^b}^c&lt;/code&gt; =&amp;gt; ${a^b}^c$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;부등식&quot;&gt;부등식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A &amp;lt; B&lt;/code&gt; =&amp;gt; $A &amp;lt; B$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \le B&lt;/code&gt; =&amp;gt; $A \le B$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A &amp;gt; B&lt;/code&gt; =&amp;gt; $A &amp;gt; B$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \ge B&lt;/code&gt; =&amp;gt; $A \ge B$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A = B&lt;/code&gt; =&amp;gt; $A = B$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \ne B&lt;/code&gt; =&amp;gt; $A \ne B$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;…&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A_1, A_2, \ldots, A_{N-1}, A_N&lt;/code&gt; =&amp;gt; $A_1, A_2, \ldots, A_{N-1}, A_N$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A_1 + A_2 + \cdots + A_{N-1} + A_N&lt;/code&gt; =&amp;gt; $A_1 + A_2 + \cdots + A_{N-1} + A_N$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;root&quot;&gt;Root&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\sqrt{2}&lt;/code&gt; =&amp;gt; $\sqrt{2}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\sqrt{x^2}&lt;/code&gt; =&amp;gt; $\sqrt{x^2}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\sqrt[3]{x^2}&lt;/code&gt; =&amp;gt; $\sqrt[3]{x^2}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;분수&quot;&gt;분수&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\dfrac&lt;/code&gt; 은 큰 분수(display), &lt;code class=&quot;highlighter-rouge&quot;&gt;\cfrac&lt;/code&gt; 은 연속 분수(continued)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\frac{A}{B}&lt;/code&gt; =&amp;gt; $\frac{A}{B}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\frac{2}{3} + \frac{3}{4}&lt;/code&gt; =&amp;gt; $\frac{2}{3} + \frac{3}{4}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\frac{dy}{dx}&lt;/code&gt; =&amp;gt; $\frac{dy}{dx}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}&lt;/code&gt; =&amp;gt; $\dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x = a_0 + \cfrac{1}{a_1 + \cfrac{1}{a_2 + \cfrac{1}{a_3}}}&lt;/code&gt; =&amp;gt; $x = a_0 + \cfrac{1}{a_1 + \cfrac{1}{a_2 + \cfrac{1}{a_3}}}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;괄호&quot;&gt;괄호&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;괄호 안에 들어가는 수식과 괄호의 길이를 맞춰주려면, 여는 괄호 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;\left&lt;/code&gt;, 닫는 괄호 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;\right&lt;/code&gt; 를 선언해야한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\left( \frac{ \frac{A}{B} }{ \frac{C}{D} } \right)&lt;/code&gt; =&amp;gt; $\left( \frac{ \frac{A}{B} }{ \frac{C}{D} } \right)$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\lfloor \frac{x}{2} \rfloor \left\lfloor \frac{x}{2} \right\rfloor&lt;/code&gt; =&amp;gt; $\lfloor \frac{x}{2} \rfloor \left\lfloor \frac{x}{2} \right\rfloor$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\lceil \frac{x}{2} \rceil \left\lceil \frac{x}{2} \right\rceil&lt;/code&gt; =&amp;gt; $\lceil \frac{x}{2} \rceil \left\lceil \frac{x}{2} \right\rceil$&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|x| \|x\|&lt;/code&gt; =&amp;gt; $&lt;/td&gt;
          &lt;td&gt;x&lt;/td&gt;
          &lt;td&gt;|x|$&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시그마&quot;&gt;시그마&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\sum {x}&lt;/code&gt; =&amp;gt; $\sum {x}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\sum_1^n {x}&lt;/code&gt; =&amp;gt; $\sum_1^n {x}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\sum_{i=1}^{\infty} {i^2}&lt;/code&gt; =&amp;gt; $\sum_{i=1}^{\infty} {i^2}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\prod \coprod \bigcup \bigcap \bigvee \bigwedge&lt;/code&gt; =&amp;gt; $\prod \coprod \bigcup \bigcap \bigvee \bigwedge$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인테그럴&quot;&gt;인테그럴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\int_{a}^{b}{f(x)dx}&lt;/code&gt; =&amp;gt; $\int_{a}^{b}{f(x)dx}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;삼각함수&quot;&gt;삼각함수&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sin(x)&lt;/code&gt; =&amp;gt; $sin(x)$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\sin^{2}{x}&lt;/code&gt; =&amp;gt; $\sin^{2}{x}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;로그log&quot;&gt;로그(Log)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\log{N}&lt;/code&gt; =&amp;gt; $\log{N}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\log_2{N}&lt;/code&gt; =&amp;gt; $\log_2{N}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;집합-관계&quot;&gt;집합 관계&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \cap B&lt;/code&gt; =&amp;gt; $A \cap B$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \cup B&lt;/code&gt; =&amp;gt; $A \cup B$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;행렬&quot;&gt;행렬&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\begin{matrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \end{matrix}&lt;/code&gt; =&amp;gt; $\begin{matrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \end{matrix}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\begin{pmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \end{pmatrix}&lt;/code&gt; =&amp;gt; $\begin{pmatrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \end{pmatrix}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\begin{bmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \end{bmatrix}&lt;/code&gt; =&amp;gt; $\begin{bmatrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \end{bmatrix}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기타&quot;&gt;기타&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\lim_{x \to 0} {x^2}&lt;/code&gt; =&amp;gt; $\lim_{x \to 0} {x^2}$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A \equiv B \pmod n&lt;/code&gt; =&amp;gt; $A \equiv B \pmod n$&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\mathbf{알파벳}&lt;/code&gt; =&amp;gt; $\mathbf{A}$&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Toy_Blog" /><summary type="html">블로그에 수학식 사용할 때 쓰는 MathJax 문법 정리</summary></entry><entry><title type="html">[Docker] Docker(도커)란?</title><link href="https://codemcd.github.io/pages/CODEMCD/study/Docker-WhatIsDocker/" rel="alternate" type="text/html" title="[Docker] Docker(도커)란?" /><published>2018-11-18T00:00:00+09:00</published><updated>2018-11-18T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/study/Docker-WhatIsDocker</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/study/Docker-WhatIsDocker/">&lt;h1 id=&quot;docker란&quot;&gt;Docker란?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662248-bc639d00-eac2-11e8-8443-1d735141d25f.JPG&quot; alt=&quot;docker logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Docker는 부두 노동자라는 영어 단어로서, Linux 기반의 Container RunTime 오픈소스 가상화 플랫폼이다.&lt;/p&gt;

&lt;h2 id=&quot;등장-배경&quot;&gt;등장 배경&lt;/h2&gt;
&lt;p&gt;여러 OS와 플랫폼의 등장으로 서버를 관리하는데 비용이 너무나 커졌다. Linux, Windows, Mac과 같이 여러 운영체제가 존재하고 Linux 내에서도 CentOS, Ubuntu 등등 다양하다. 이에 더해 현재에는 클라우드 서비스가 활발하며, 클라우드 역시 AWS, Azure, 구글 클라우드 등 서버를 운영하기 위한 환경이 매우 다양하다.&lt;/p&gt;

&lt;p&gt;하나의 서버에서 여러 프로그램을 설치하는 것에는 많은 충돌이 발생한다. 현재에는 위와 같이 여러 환경이 존재하기 때문에 가상머신을 여러 개 사용해야한다. 하지만 가상머신 기술은 전체 운영체제를 설치하는 방식이므로 매우 느리고 관리하기 힘들다. 이를 해결하기 위해 Docker가 등장한다.&lt;/p&gt;

&lt;h3 id=&quot;가상머신virtual-machine&quot;&gt;가상머신(Virtual Machine)&lt;/h3&gt;
&lt;p&gt;가상머신은 하드웨어를 소프트웨어적으로 구현해서 그 위에서 운영체제를 작동하도록하는 기술이다. 즉, 리얼머신에서 하나의 운영체제가 동작하고 있는 상황에서 가상머신을 통해 다른 운영체제를 하나 더 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;가상화의 방식에는 전가상화(Full-Virtualization)과 반가상화(Para-Virtualization)으로 나뉜다.&lt;/p&gt;

&lt;p&gt;전가상화는 하드웨어 자원을 완전히 가상화하는 방식이다. 그러므로 Guest OS를 아무런 수정없이 쉽게 도입이 가능하다. 하지만, CPU의 VT(Virtual Technology)를 이용하므로 오버헤드가 상당히 크다. 전가상화를 사용하는 플랫폼은 VMware, VirtualBox 등이 있다.&lt;/p&gt;

&lt;p&gt;반가상화는 게스트 OS를 수정하여 게스트 OS가 가상화되고 있음을 인식하도록 하여 하이퍼바이저(Hyperviser, 가상화를 지원하는 소프트웨어)가 필요할 때만 호출되도록 한다. 반가상화는 게스트 OS를 수정해야 하므로 OS 소스코드에 접근가능해야 하므로 도입이 어렵다. 하지만, 가상화를 호출하는 빈도를 최소화하여 성능을 대폭 향상시킬 수 있다. 반가상화는 대표적으로 Xen이 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662230-82929680-eac2-11e8-87ed-4883d3912497.JPG&quot; alt=&quot;virtualization&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가상머신 자체는 완전한 게스트 운영체제를 설치해야 하므로 용량이 크고 반가상화라 할지라도 리얼 머신에 비해 성능이 크게 감소된다.&lt;/p&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;
&lt;p&gt;Docker는 반가상화보다도 조금 더 경령화된 방식이다. Docker는 게스트 OS 자체를 설치하지 않고 운영에 필요한 프로그램과 라이브러리만 설치하여 이미지 크기를 대폭 줄였다. 그리고 시스템 콜과 같은 OS 자원은 호스트 OS와 공유한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662228-82929680-eac2-11e8-9938-cdfdab5daec7.JPG&quot; alt=&quot;docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Docker는 하이퍼바이저가 없기 때문에 리얼 머신과 성능이 거의 비슷하다. 아래의 표를 보면 확인할 수 있듯이 CPU, 메모리 접근, 파일 시스템 성능이 거의 똑같이 나오는 것을 볼 수 있고, 네트워크 속도 역시 비슷하게 측정된다고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662227-82929680-eac2-11e8-8689-84ba6224f7f0.JPG&quot; alt=&quot;docker performance&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-구성&quot;&gt;Docker 구성&lt;/h2&gt;
&lt;p&gt;Docker는 크게 컨테이너(Container)와 이미지(Image)로 구성되어 있다. 컨테이너는 리눅스의 컨테이너 기술에서 왔으며, 이미지는 컨테이너 실행에 필요한 파일이다.&lt;/p&gt;

&lt;h3 id=&quot;리눅스-컨테이너&quot;&gt;리눅스 컨테이너&lt;/h3&gt;
&lt;p&gt;LXC(Linux Container)는 운영 시스템 레벨의 가상화 방법이다. 단일 호스트 환경에서 여러 개의 고립된 리눅스 시스템(컨테이너)들을 사용하기 위해 만들어졌다. 이를 위해 리눅스 커널안에서 고립된 가상의 공간을 만든다고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;컨테이너는 가상머신과 달리 호스트 OS에서 바로 시작하여 훨씬 성능이 좋다. 컨테이너는 자체적인 그룹화를 시행하여 다른 그룹이나 그룹에 속하지 않는 프로세스들과 단절된 공간을 만든다. 컨테이너간 역시 서로 내부를 볼 수 없다.&lt;/p&gt;

&lt;p&gt;LXC는 리눅스 커널의 cgroups(Control Groups)와 namespaces(Namespace Isolation)를 결합하여 고립된 공간을 만든다. cgroups는 CPU, 메모리, 블록 I/O, 네트워크 등과 같은 자원을 할당한다. namespace isolation은 애플리케이션 입장에서 프로세스 트리, 네트워크, 사용자 ID, 마운트된 파일 등을 호스트와 완전히 격리하여 고립된 운영 환경을 만들고, 이는 cgroups에서 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662229-82929680-eac2-11e8-85a4-7a84fb42f490.JPG&quot; alt=&quot;linux container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LXC는 리눅스가 제공하는 기술 중 하나인 “chroot”와 비슷하다. chroot는 프로세스의 루트 디렉토리를 변경하는 명령으로, 프로세스가 접근 할 수 있는 디렉트로리를 제한하거나 시스템 라이브러리와 관련 라이브러리를 로드할 수 있다. 하지만 이것만으로는 네트워크와 프로세스를 제어할 수 없었다. 이를 해결하기 위해 더 발전시킨 “jail” 기능이 만들어졌다. LXC는 jail과 유사한 개념으로 여러 자원을 제어 및 격리하는 기능이 구현되어 있다.&lt;/p&gt;

&lt;p&gt;Docker는 초기에는 LXC기반으로 컨테이너 생성 및 관리 기능 등 다양한 기능을 추가하였다. 버전 0.9 이후로는 libcontainer를 자체적으로 개발하여 사용하고 있으며, 옵션을 통해 LXC와 libcontainer를 선택적으로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662224-81fa0000-eac2-11e8-840f-a28818bd0124.JPG&quot; alt=&quot;docker container&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;이미지image&quot;&gt;이미지(Image)&lt;/h3&gt;
&lt;p&gt;Docker 이미지는 보통 2가지로 구성되어 있다. 첫 번째는 리눅스 운영체제이다. 어떤 프로그램(예를들어, Nginx, MySQL 등)을 실행하려면 운영체제가 있어야 한다. Docker 이미지에서는 기본적으로 리눅스 배포판을 사용한다. 배포판에는 리눅스 부팅에 필요한 최소한의 실행 파일과 라이브러리가 존재한다. 배포판만으로도 패키징 시스템을 사용할 수 있다. 물론 다른 필요한 기능들을 추가하여 이미지를 만들 수도 있다. 두 번째는 사용할 애플리케이션이다.&lt;/p&gt;

&lt;p&gt;Docker 이미지 크기는 수메가에서 수기가바이트까지 필요에 따라 다양하지만, 운영체제 하나가 수십기가바이트이므로, 훨씬 작은 크기인 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;Docker 이미지는 Docker hub를 통해 대부분 공개되어 있어 필요에 따라 적절한 이미지를 찾아 사용할 수 있고, 자신이 만든 이미지 역시 등록할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;컨테이너container&quot;&gt;컨테이너(Container)&lt;/h3&gt;
&lt;p&gt;컨테이너는 이미지 파일을 실행한 상태라고 볼 수 있다. 하나의 이미지로 여러 컨테이너를 만들 수 있고, 이들은 모두 독립적이다. 운영체제로 보면 이미지는 실행 파일이고, 컨테이너는 프로세스라고 볼 수 있다. 이미 실행된 컨테이너에서 해당 이미지가 변경된 부분을 바로 새로운 이미지로 만들 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;docker-layer&quot;&gt;Docker layer&lt;/h2&gt;
&lt;p&gt;Docker 이미지를 수정할 때마다 수백메가의 크기를 계속 다시 다운로드받는다면 엄청난 비효율을 가져온다. Docker는 이를 해결하기 위해 레이어(layer)라는 개념을 도입하여 유니온 파일 시스템(Union File System)을 사용한다. 이를 통해 여러 개의 레이어를 하나의 파일 시스템으로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;Docker 이미지는 읽기 전용 상태이다. 여기서 내용이 바뀌면 해당 이미지를 수정하지 않고, 쓰기 이미지를 생성한 뒤 수정된 내용만을 기록한다. 이러한 방식을 Union mount라고 한다.&lt;/p&gt;

&lt;p&gt;예를 들어, Ubuntu 이미지가 &lt;code class=&quot;highlighter-rouge&quot;&gt;A, B, C&lt;/code&gt;로 구성되어 있다. 여기서 웹서비스를 제공하기 위해 Nginx를 설치 한다. 그러면 기존의 Ubuntu에 Nginx라는 새로운 내용이 추가되어 새로운 이미지 &lt;code class=&quot;highlighter-rouge&quot;&gt;(A, B, C), Nginx&lt;/code&gt;가 만들어진다. 마지막으로 애플리케시션 소스를 추가하면 최종으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;(A, B, C, Nginx), Source&lt;/code&gt; 이미지가 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662226-81fa0000-eac2-11e8-80a3-cd0a064093db.JPG&quot; alt=&quot;docker layer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림은 예제를 그림으로 표시한 것이다. 컨테이너를 생성할 때는 읽기/쓰기 레이어(R/W layer)를 기본적으로 추가하여 해당 이미지에서 변경된 내용을 저장한다.&lt;/p&gt;

&lt;p&gt;이와 같이 이미지들은 수정될 때마다 새로운 이미지를 만들어내며, 기존의 이미지와 새로 만들어진 이미지 사이에 부모-자식 관계가 만들어진다. 위의 예제를 이러한 의존적 관계로 나타내면 아래 그림과 같다.&lt;/p&gt;

&lt;p&gt;Docker 이미지를 생성할 때는 바뀐 부분만 생성한 뒤 부모 이미지와 연결한다. 컨테이너를 실행하면 해당 이미지를 불러온 뒤 부모를 계속 참조하는 방식으로 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48670714-5e38c780-eb5f-11e8-8153-a1f4b7b760bb.JPG&quot; alt=&quot;docker layer tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Docker 이미지 파일을 Docker hub에 올릴 때는 부모 이미지들을 모두 포함하여 올린다.&lt;/p&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alpine&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;\&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;\&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upgrade&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;EXPOSE&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docker 이미지를 만들기 위해서는 Dockerfile을 빌드해야 한다. 이 파일은 DSL(Domain Specific Language)를 사용한다. 이 파일은 해당 이미지를 생성하기 위해서 필요한 여러 사전 작업을 명시하여 실행시킨다. 여러 의존성 패키지를 설치하거나 포트를 연결해주는 일 등을 한다.&lt;/p&gt;

&lt;h3 id=&quot;dsl&quot;&gt;DSL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;FROM: 어떤 이미지를 기반으로 할지 설정&lt;/li&gt;
  &lt;li&gt;MAINTAINER: 이미지 작성자 정보&lt;/li&gt;
  &lt;li&gt;RUN: 이미지에서 스크립트나 명령 실행&lt;/li&gt;
  &lt;li&gt;CMD: 컨테이너가 시작되었을 때 스크립트나 명령 실행&lt;/li&gt;
  &lt;li&gt;ENTRYPOINT: 컨테이너가 시작되었을 때 스크립트나 명령 실행(docker run에서 처리 방식이 다름)&lt;/li&gt;
  &lt;li&gt;EXPOSE: 호스트와 연결할 포트 번호 설정&lt;/li&gt;
  &lt;li&gt;ENV: 환경 변수 설정&lt;/li&gt;
  &lt;li&gt;ADD, COPY: 이미지에 파일 추가&lt;/li&gt;
  &lt;li&gt;VOLUME: 데이터를 호스트에 저장하도록 설정&lt;/li&gt;
  &lt;li&gt;USER: 명령을 실행할 사용자 계정 설정&lt;/li&gt;
  &lt;li&gt;WORKDIR: 명령을 실행할 디렉토리 설정&lt;/li&gt;
  &lt;li&gt;ONBUILD: FROM으로 이미지가 사용될 때 실행할 명령 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이미지-만들기-예제&quot;&gt;이미지 만들기 예제&lt;/h3&gt;
&lt;p&gt;간단하게 웹(web)에 글을 출력하는 이미지 파일을 만들어보자. 이를 위해 아래의 3개의 파일이 필요하고, 해당 디렉토리안에서 명령어를 사용해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alpine&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;\&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;\&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upgrade&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;EXPOSE&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;app.js&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello world from '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'! Your app is up and running in a cluster!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sample app is listening on port 8080.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;package.json&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello-world-demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Basic hello world application for Node.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.x&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;이미지 빌드(Build)
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker image build -t hello-world:1 .&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;docker build &lt;옵션&gt; &lt;Dockerfile 경로=&quot;&quot;&gt;&lt;/Dockerfile&gt;&lt;/옵션&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;: tag의 약자로 해당 이미지에 이름을 붙인다.(이름:버전 양식)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이미지 확인
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker image ls&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;이미지 세부 사항
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker image inspect hello-world:1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;이미지 실행
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container run -d -p 8080:8080 -v /root/date:/date --name hello-world-a hello-world:1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;: 컨테이너를 백그라운드로 실행한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p Host Port:Container Port&lt;/code&gt;: 호스트 포트와 컨테이너 포트를 연결하고 외부에 노출시킨다. http://&lt;Host IP=&quot;&quot;&gt;:8080에 접속하면 컨테이너의 8080번 포트로 접속된다.&lt;/Host&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v Host Directory:Container Directory&lt;/code&gt;: volume의 약자로 호스트의 디렉토리를 컨테이너 디렉토리에 연결한다. 그러면 호스트의 디렉토리에 파일을 컨테이너에서 사용할 수 있다.(변경사항들도 모두 적용된다.)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt;: 이미지 이름을 설정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컨테이너 확인
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container ls&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 결과 화면&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/48662225-81fa0000-eac2-11e8-8f55-1c048df49658.JPG&quot; alt=&quot;docker image build example&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=brickbot&amp;amp;logNo=220413822823&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F&quot;&gt;전가상화와 반가상화&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.opennaru.com/openshift/docker/what-is-the-difference-between-docker-lxd-and-lxc/&quot;&gt;리눅스 컨테이너&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/IBM/container-service-getting-started-wt/tree/master/Lab%201&quot;&gt;Docker 예제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="Study_Cloud" /><summary type="html">Docker 소개와 기본 개념, 예제</summary></entry></feed>