<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://codemcd.github.io/pages/CODEMCD/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codemcd.github.io/pages/CODEMCD/" rel="alternate" type="text/html" /><updated>2018-10-14T21:16:19+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/</id><title type="html">CODEMCD’s Tech Blog</title><subtitle>My Tech Blog</subtitle><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><entry><title type="html">[Database]개념 정리</title><link href="https://codemcd.github.io/pages/CODEMCD/database/Database-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="[Database]개념 정리" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/database/Database-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%20%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/database/Database-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC/">&lt;h1 id=&quot;데이터베이스database&quot;&gt;데이터베이스(Database)&lt;/h1&gt;

&lt;h2 id=&quot;데이터베이스-개념&quot;&gt;데이터베이스 개념&lt;/h2&gt;
&lt;h3 id=&quot;정의&quot;&gt;정의&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;특정 조직의 업무를 수행하는데 있어서 필요한 상호 관련된 데이터들의 모임&lt;/li&gt;
  &lt;li&gt;통합 데이터(Integrated Data): 검색의 효율성을 위해 중복을 최소화한 데이터&lt;/li&gt;
  &lt;li&gt;저장 데이터(Stored Data): 컴퓨터가 접근 가능한 저장 매체에 저장된 데이터&lt;/li&gt;
  &lt;li&gt;운영 데이터(Operational Data): 조직의 목표를 위해 존재 가치가 확실하고 반드시 필요한 데이터&lt;/li&gt;
  &lt;li&gt;공유 데이터(Shared Data): 여러 프로그램들이 공동으로 사용하는 데이터
    &lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;실시간 접근성(Real Time Accessibility): 사용자의 질의(query)에 대해 즉시 처리하여 응답한다.&lt;/li&gt;
  &lt;li&gt;계속적인 진화(Continuous Evolution): 항상 최근의 정확한 데이터를 동적으로 유지한다.&lt;/li&gt;
  &lt;li&gt;동시 공유(Concurrent Sharing): 여러 사용자가 동시에 원하는 데이터를 사용가능하다.&lt;/li&gt;
  &lt;li&gt;내용에 의한 참조(Content Reference): 데이터를 참조할 때 내용으로 참조한다.(물리적 주소값이 아님)&lt;/li&gt;
  &lt;li&gt;독립성(Independence)
    &lt;ul&gt;
      &lt;li&gt;논리적 독립성(응용프로그램과 데이터베이스와의 관계): 데이터의 논리적 구조를 변경하더라도 응용프로그램에는 영향을 주지 않는다.&lt;/li&gt;
      &lt;li&gt;물리적 독립성(응용프로그램과 보조기억장치와의 관계): 새로운 저장장치의 추가에도 응용프로그램에는 영향을 주지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;무결성(Integrity): 데이터베이스에 저장된 데이터 값과 실제 값이 일치하는 정확성
    &lt;ul&gt;
      &lt;li&gt;무결성 제약 조건: 정확하지 않은 데이터가 데이터베이스내에 저장되는 것을 방지하기 위한 제약 조건
        &lt;ol&gt;
          &lt;li&gt;널 무결성(NULL Integrity): 특정 속성(attribute)값이 NULL일 수 없다.&lt;/li&gt;
          &lt;li&gt;고유 무결성(Unique Integrity): 특정 속성에 대해 각 튜플들은 서로 다른 값이어야 한다.&lt;/li&gt;
          &lt;li&gt;키 무결성(Key Integrity): 하나의 릴레이션에는 적어도 하나의 key가 있어야 한다.&lt;/li&gt;
          &lt;li&gt;도메인 무결성(Domain Integrity): 특정 속성값이 해당 속성이 정의된 도메인에 속한 값이어야 한다.&lt;/li&gt;
          &lt;li&gt;관계 무결성(Relationship Integrity): 릴레이션에서 튜플의 삽입 가능 여부와 서로 다른 릴레이션의 튜플들 사이의 관계가 적절해야 한다.&lt;/li&gt;
          &lt;li&gt;참조 무결성(Referential Integrity): Foreign key는 NULL값이거나 참조 릴레이션의 primary key와 동일해야한다.&lt;/li&gt;
          &lt;li&gt;개체 무결성(Entity Integrity): Primary key를 구성하는 속성은 NULL일 수 없다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보안성&lt;/li&gt;
  &lt;li&gt;일관성&lt;/li&gt;
  &lt;li&gt;데이터 중복 최소
    &lt;h3 id=&quot;data-language&quot;&gt;Data Language&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스의 구축과 사용을 위해 DBMS와의 통신 수단이다.&lt;/li&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;DDL(Data Definition Language): 데이터베이스의 구조, 형식, 접근방식 등을 구축하거나 변경한다.&lt;/li&gt;
      &lt;li&gt;DML(Data Manipulation Language): 데이터 처리를 위한 연산의 집합(검색, 삽입, 삭제, 갱신)이다.&lt;/li&gt;
      &lt;li&gt;DCL(Data Control Language): 보안 및 권한제어, 무결성, 회복, 벙행제어를 수행한다.
        &lt;h3 id=&quot;데이터베이스-사용자&quot;&gt;데이터베이스 사용자&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DBA(DataBase Administrator, 데이터베이스 관리자): 데이터베이스를 정의하고 제어하는 사람 또는 그룹&lt;/li&gt;
  &lt;li&gt;DA(Data Administrator, 데이터 관리자): 조직내에서 데이터에 대한 정의, 체계화, 감독 및 보안 업무를 수행한다.&lt;/li&gt;
  &lt;li&gt;DA(Data Architect, 데이터 설계자): 데이터의 구조를 체계적으로 정의한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시스템-카탈로그system-catalog&quot;&gt;시스템 카탈로그(System Catalog)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DBA의 도구로써, 데이터베이스에 저장되어 있는 모든 데이터 개체들에 대한 정의와 명세와 같은 정보들이 저장되어 있는 테이블이다.&lt;/li&gt;
  &lt;li&gt;데이터 사전(Data Dictionary) 라고도 불린다.&lt;/li&gt;
  &lt;li&gt;시스템 카탈로그에 저장된 내용을 메타 데이터(Meta Data)라고 한다.&lt;/li&gt;
  &lt;li&gt;시스템 카탈로그는 DBMS에 의해 생성되고 유지되며, 사용자가 SQL문으로 수정할 수 없다.(DBMS와 사용자가 접근 가능하다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dbmsdatabase-management-system&quot;&gt;DBMS(Database Management System)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다수의 사용자들이 데이터베이스 내의 데이터를 접근할 수 있도록 해주는 소프트웨어 도구의 집합이다.&lt;/li&gt;
  &lt;li&gt;주어진 설정에 따라 데이터베이스 스키마를 생성하고, 생성된 스키마를 참조하여 명령을 수행한다.&lt;/li&gt;
  &lt;li&gt;DDL 컴파일러와 트랜잭션 관리자로 구성되어 있다.
    &lt;h3 id=&quot;기능&quot;&gt;기능&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자 또는 다른 프로그램의 요구를 처리하고 적절히 응답하여 데이터를 사용할 수 있도록 도와준다.&lt;/li&gt;
  &lt;li&gt;정의: 데이터에 대한 형식, 구조, 제약조선들을 명세하는 기능(데이터베이스에 대한 정의 및 설명은 카탈로그나 사전의 형태로 저장된다.)&lt;/li&gt;
  &lt;li&gt;구축: DBMS가 관리하는 기억 장치에 데이터를 저장하는 기능&lt;/li&gt;
  &lt;li&gt;조작: 특정한 데이터를 검색하기 위한 질의, 데이터베이스의 갱신, 보고서 생성 기능 등&lt;/li&gt;
  &lt;li&gt;공유: 여러 사용자와 프로그램이 데이터베이스에 동시에 접근하도록 하는 기능&lt;/li&gt;
  &lt;li&gt;보호: 하드웨어나 소프트웨어의 오동작 또는 권한이 없는 악의적인 접근으로부터 시스템을 보호&lt;/li&gt;
  &lt;li&gt;유지보수: 시간이 지남에 따라 변화하는 요구사항을 반영할 수 있도록 하는 기능
    &lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터의 통합성 향상&lt;/li&gt;
  &lt;li&gt;데이터의 접근성 용이&lt;/li&gt;
  &lt;li&gt;데이터 통제 강화&lt;/li&gt;
  &lt;li&gt;애플리케이션 프로그램들을 쉽게 개발 및 관리가 가능&lt;/li&gt;
  &lt;li&gt;보안 강화&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스키마schema&quot;&gt;스키마(Schema)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스에서 데이터의 구조, 표현 방법, 관계를 형식 언어로 정의한 구조이다.&lt;/li&gt;
  &lt;li&gt;외부 스키마(External Schema): 프로그래머나 사용자의 입장에서 데이터베이스 모습을 정의한다.&lt;/li&gt;
  &lt;li&gt;개념 스키마(Conceptual Schema): 모든 응용 시스템과 사용자들의 관점에서 데이터베이스 구조를 논리적으로 정의한다.&lt;/li&gt;
  &lt;li&gt;내부 스키마(Internal Schema): 전체 데이터베이스의 물리적 저장 형태를 기술한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-설계&quot;&gt;데이터베이스 설계&lt;/h2&gt;
&lt;h3 id=&quot;1-요구-조건-분석&quot;&gt;1. 요구 조건 분석&lt;/h3&gt;
&lt;h3 id=&quot;2-개념적-설계&quot;&gt;2. 개념적 설계&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;개념 스키마 모델링: ER Model과 같은 추상화 기법을 통해 개념 스키마를 만든다.&lt;/li&gt;
  &lt;li&gt;트랜잭션 모델링
    &lt;h3 id=&quot;3-논리적-설계&quot;&gt;3. 논리적 설계&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;논리 스키마를 설계한다.&lt;/li&gt;
  &lt;li&gt;관계형 DBMS의 경우 ER Model을 relation schema로 변환한다.(정규화 수행)&lt;/li&gt;
  &lt;li&gt;트랜잭션의 전체적인 구조를 설계하고 인터페이스를 정의한다.
    &lt;h3 id=&quot;4-물리적-설계&quot;&gt;4. 물리적 설계&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;물리 스키마를 설계한다.&lt;/li&gt;
  &lt;li&gt;데이터베이스 파일에 대한 저장 구조와 접근 경로를 설정한다.
    &lt;h3 id=&quot;5-데이터베이스-구현&quot;&gt;5. 데이터베이스 구현&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;DBMS의 DDL을 사용하여 데이터베이스를 구축한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;
&lt;h3 id=&quot;relationship-data-model&quot;&gt;Relationship Data Model&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;대표적인 논리적 데이터 모델로서, 테이블(Table) 또는 릴레이션(Relation)의 구조로 표현한다.&lt;/li&gt;
  &lt;li&gt;테이블 그림 삽입&lt;/li&gt;
  &lt;li&gt;Relation: 데이터를 표현하는 2차원 테이블
    &lt;ul&gt;
      &lt;li&gt;Relation Schema: Relation의 이름, 각 attribute에 대한 정의&lt;/li&gt;
      &lt;li&gt;Relation Instance: Relation에 들어있는 tuple들의 집합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Attribute(속성): Relation의 columns&lt;/li&gt;
  &lt;li&gt;Tuple(튜플): Relation의 rows&lt;/li&gt;
  &lt;li&gt;Domain: 하나의 attribute가 가질 수 있는 같은 타입의 값들의 집합&lt;/li&gt;
  &lt;li&gt;Degree: Relation의 attribute의 개수&lt;/li&gt;
  &lt;li&gt;Cardinality: Relation의 tuple의 개수
    &lt;h3 id=&quot;er-modelentity---relationship-model&quot;&gt;ER Model(Entity - Relationship Model)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;대표적인 개념적 데이터 모델로서, Entity, Relationship, Attribute 를 도형화하여 표현한 것이다.&lt;/li&gt;
  &lt;li&gt;위를 ERD(ER Diagram)이라고 부른다.&lt;/li&gt;
  &lt;li&gt;그림 삽입&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key&quot;&gt;key&lt;/h2&gt;
&lt;p&gt;|          Key          	|                             특징                             	| 유일성 	| 최소성 	|
|:———————:	|:————————————————————:	|:——:	|:——:	|
|   Super Key(슈퍼키)   	|              한 릴레이션 내에 있는 속성들의 집합             	|    O   	|    X   	|
| Candidate Key(후보키) 	|      한 릴레이션에서 튜플을 유일하게 식별할 수 있는 속성     	|    O   	|    O   	|
|  Primary Key(기본키)  	| 후보키 중 특별히 선정된 키(중복된 값과 NULL을 가질 수 없음) 	|    O   	|    O   	|
| Alternate Key(대체키) 	|            후보키중 기본키를 제외한 나머지 속성들            	|    O   	|    O   	|
|  Foreign Key(외래키)  	|   다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합(중복된 값과 NULL을 가질 수 없음)  	|    O   	|    O   	|&lt;/p&gt;

&lt;h2 id=&quot;관계대수와-관계해석&quot;&gt;관계대수와 관계해석&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관계대수로 표현한 식은 관계해석으로도 표현 가능하다.&lt;/li&gt;
  &lt;li&gt;관계해석과 관계대수는 관계형 데이터베이스를 처리하는 기능과 능력면에서는 동등하다.
    &lt;h3 id=&quot;관계대수relation-algebra&quot;&gt;관계대수(Relation Algebra)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;관계형 데이터베이스에서 원하는 정보를 검색하기 위해서 어떻게 유도할지를 기술한 절차적 언어로 연산자와 연산규칙을 제공한다.&lt;/li&gt;
  &lt;li&gt;질의에 대한 해를 구하기 위해 수행해야할 연산의 순서를 명시한다.(절차적 성격)&lt;/li&gt;
  &lt;li&gt;순수 관계 연산자
    &lt;ul&gt;
      &lt;li&gt;표 그림 삽입&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반 집합 연산자
    &lt;ul&gt;
      &lt;li&gt;표 그림 삽입
        &lt;h3 id=&quot;관계해석relation-calculus&quot;&gt;관계해석(Relation Calculus)&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E.F.Codd박사가 제안한 것으로 수학의 술어해석에 기반을 둔다.&lt;/li&gt;
  &lt;li&gt;원하는 정보가 무엇이라는 것만 정의하는 비절차적 특징을 갖는다.&lt;/li&gt;
  &lt;li&gt;SQL문과 같은 질의어를 사용하며 튜플 관계해석과 도메인 해석으로 구성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정규화normalization&quot;&gt;정규화(Normalization)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;테이블 속성들 사이의 종속적인 관계를 이용하여 테이블을 손실없이 분해하는 과정이다.&lt;/li&gt;
  &lt;li&gt;이러한 분해를 통해, 중복을 최대한 제거하고 이상(anomaly)의 발생 가능성을 줄인다.
    &lt;h3 id=&quot;이상anomaly&quot;&gt;이상(Anomaly)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;테이블 일부 속성들이 종속으로인해 중복이 발생하여 테이블 조작에 문제가 발생하는 현상이다.&lt;/li&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;삽입 이상(Insert Anomaly): 원하지 않는 데이터가 삽입되거나 삽입하는데 데이터가 부족하여 삽입이 되지 않는 문제점을 말한다.&lt;/li&gt;
      &lt;li&gt;삭제 이상(Delete Anomaly): 하나의 데이터만을 삭제하는 동작에서 해당 데이터가 포함된 튜플 전체가 삭제됨과 같은 원하지 않는 정보 손실이 발생하는 문제점을 말한다.&lt;/li&gt;
      &lt;li&gt;갱신 이상(Update Anomaly): 튜플에 있는 속성값을 갱신하는 동작에서 일부 튜플 정보만 갱신되어 정보에 불일치성이 생기는 문제점을 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원인: 여러가지 종류의 값들을 하나의 릴레이션에 표현하기 때문이다.&lt;/li&gt;
  &lt;li&gt;해결 방안: 속성들간의 종속성을 분석하여 하나의 종속성은 하나의 릴레이션에 표현되도록 분해한다.(정규화)
    &lt;h3 id=&quot;함수적-종속functional-dependency&quot;&gt;함수적 종속(Functional Dependency)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;임의의 테이블 R에서 X와 Y를 각각 R의 속성 집합의 부분 집합이라고 할때, X의 값이 Y의 값을 유일하게(unique) 결정한다면 “X는 Y를 함수적으로 결정한다”라고 한다.&lt;/li&gt;
  &lt;li&gt;이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;X -&amp;gt; Y&lt;/code&gt;로 표기하며, X를 결정자(Determinant), Y를 종속자(Dependent)라고 부른다.&lt;/li&gt;
  &lt;li&gt;완전 함수적 종속(Full Functional Dependency): &lt;code class=&quot;highlighter-rouge&quot;&gt;X -&amp;gt; Y&lt;/code&gt;일때, X의 임의의 애트리뷰트를 제거하면 더 이상 함수적 종속성이 성립하지 않는 경우를 말한다.&lt;/li&gt;
  &lt;li&gt;부분 함수적 종속(Partial Functional Dependency): &lt;code class=&quot;highlighter-rouge&quot;&gt;X -&amp;gt; Y&lt;/code&gt;일때, X의 임의이 애트리뷰트를 제거하더라도 함수적 종속성을 성립하는 경우를 말한다.&lt;/li&gt;
  &lt;li&gt;이행 함수적 종속(Transitive Functional Dependency): &lt;code class=&quot;highlighter-rouge&quot;&gt;X -&amp;gt; Y&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Y -&amp;gt; Z&lt;/code&gt;의 경우에서 추론될 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;X -&amp;gt; Z&lt;/code&gt;가 성립하는 경우를 말한다.&lt;/li&gt;
  &lt;li&gt;다치종속(Multi-Valued Dependency, MVD): &lt;code class=&quot;highlighter-rouge&quot;&gt;X, Y -&amp;gt; Z&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;X -&amp;gt; Z&lt;/code&gt;가 성립하는 경우이다.&lt;/li&gt;
  &lt;li&gt;조인 종속: 테이블 R과 R의 프로젝션들을 모두 조인한 결과가 동일한 경우를 말한다.
    &lt;h3 id=&quot;정규화-과정&quot;&gt;정규화 과정&lt;/h3&gt;
    &lt;h4 id=&quot;제-1-정규형1nf&quot;&gt;제 1 정규형(1NF)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;애트리뷰트의 도메인이 오직 &lt;strong&gt;원자값&lt;/strong&gt; 만을 포함하고, 튜플의 모든 애트리뷰트가 도메인에 속하는 하나의 값을 가져야 한다.&lt;/li&gt;
  &lt;li&gt;복합 애트리뷰트, 다중값 애트리뷰트, 중첩 릴레이션 등 비원자적인 애트리뷰트를 혀용하지 않는 릴레이션 형태이다.
    &lt;h4 id=&quot;제-2-정규형2nf&quot;&gt;제 2 정규형(2NF)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 비주요 애트리뷰트들이 주요 애트리뷰트에 대해서 &lt;strong&gt;완전 함수적 종속&lt;/strong&gt; 이면 제 2 정규형을 만족한다.&lt;/li&gt;
  &lt;li&gt;기본키가 아닌 모든 애트리뷰트들이 기본키에 완전 함수적 종속이 되는 릴레이션 형태이다.
    &lt;h4 id=&quot;제-3-정규형3nf&quot;&gt;제 3 정규형(3NF)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 비주요 애트리뷰트들이 기본키에 대해서 &lt;strong&gt;이행 함수적 종속이 성립하지 않으면&lt;/strong&gt; 제 3 정규형을 만족한다.&lt;/li&gt;
  &lt;li&gt;비주요 애트리뷰트가 비주요 애트리뷰트에 의해 종속되는 경우가 없는 릴레이션 형태를 말한다.
    &lt;h4 id=&quot;bcnfboyce-codd-정규형&quot;&gt;BCNF(Boyce-Codd) 정규형&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 후보키가 존재하는 릴레이션에 해당하는 정규화이다.&lt;/li&gt;
  &lt;li&gt;모든 종속의 결정자가 후보키가 되면 BCNF 정규형을 만족한다.
    &lt;h4 id=&quot;제-4-정규형4nf&quot;&gt;제 4 정규형(4NF)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;다치종속관계&lt;/strong&gt; 가 성립되는 경우를 모두 제거한 형태를 말한다.
    &lt;h4 id=&quot;제-5-정규형5nf&quot;&gt;제 5 정규형(5NF)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;조인종속&lt;/strong&gt; 이 후보키를 통해서만 성립되는 형태를 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인덱스index&quot;&gt;인덱스(Index)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DBMS가 데이터베이스 테이블의 데이터를 빠르게 검색하기 위해서 &amp;lt;데이터, 데이터가 저장된 주소&amp;gt; 쌍으로 구성되는 데이터 구조이다.&lt;/li&gt;
  &lt;li&gt;DBMS의 인덱스는 항상 정렬된 상태를 유지하기 때문에 원하는 값을 탐색하는것은 빠르지만 새로운 값을 추가, 삭제, 수정하는 경우에는 느리다.&lt;/li&gt;
  &lt;li&gt;즉, 인덱스는 데이터의 저장 성능을 희생하는 대신 데이터의 읽기 속도를 높이는 역할을 한다.
    &lt;h3 id=&quot;인덱스-종류&quot;&gt;인덱스 종류&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;기본 인덱스
    &lt;ul&gt;
      &lt;li&gt;기본키를 위한 인덱스&lt;/li&gt;
      &lt;li&gt;관계형 DBMS에서는 모든 기본키에 자동적으로 기본 인덱스를 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보조 인덱스: 기본 인덱스가 아닌 나머지 인덱스&lt;/li&gt;
  &lt;li&gt;클러스터드(Clustered) 인덱스
    &lt;ul&gt;
      &lt;li&gt;인덱스 테이블의 키 값 순서와 튜플의 물리적 순서를 동일하게 유지하는 인덱스(물리적으로 인접한 장소에 저장되어 있는 데이터들)&lt;/li&gt;
      &lt;li&gt;클러스터드 인덱스는 기본키에 대해서만 적용되며, 기본키가 비슷한 레코드끼리 묶어서 저장한 것이다.&lt;/li&gt;
      &lt;li&gt;기본키값에 따라 레코드의 저장 위치가 결졍되므로 기본키값이 변경되면 해당 레코드의 물리적인 저장 위치 역시 변경되어야 한다.&lt;/li&gt;
      &lt;li&gt;클러스터드 인덱스는 테이블당 기본키와 같이 한 개만 생성할 수 있다.(Non-clustered 인덱스는 한 테이블당 여러개를 생성할 수 있다.)
        &lt;h3 id=&quot;인덱스-자료구조&quot;&gt;인덱스 자료구조&lt;/h3&gt;
        &lt;h4 id=&quot;b-tree-인덱스-알고리즘&quot;&gt;B+-Tree 인덱스 알고리즘&lt;/h4&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반적으로 사용되는 인덱스 알고리즘은 B+-Tree 알고리즘이다.&lt;/li&gt;
  &lt;li&gt;B+-Tree 인덱스는 칼럼의 값을 변형하지 않고(사실, 값의 일부분만 잘라서 관리함), 원래의 값을 이용해 인덱싱하는 알고리즘이다.
    &lt;h4 id=&quot;hash-인덱스-알고리즘&quot;&gt;Hash 인덱스 알고리즘&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;칼럼 값을 해시 값으로 계산해서 인덱싱하는 알고리즘으로 매우 빠른 검색을 지원한다.&lt;/li&gt;
  &lt;li&gt;값을 변형해서 인덱싱하므로, 특정 문자로 시작하는 검색인 전방 일치 검색과 같이 값의 일부만으로 검색하고자 할 때는 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;주로 메모리 기반의 데이터베이스에 사용된다.
    &lt;h4 id=&quot;왜-index를-생성하는데-주로-b-tree를-사용하는가&quot;&gt;왜 index를 생성하는데 주로 B-Tree를 사용하는가?&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터에 접근하는 시간복잡도가 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;인 hash table이 더 효율적일 것 같지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;질의의 조건에는 부등호(&amp;lt; &amp;gt;)연산도 포함이 되는데 이는 hash table에서 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;동등 연산(=)에 특화된 hash table은 데이터베이서의 자료구조에 적합하지 않다.
    &lt;h3 id=&quot;인덱스-성능&quot;&gt;인덱스 성능&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;인덱스를 사용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; 쿼리의 성능을 크게 상향시킬 수 있다.&lt;/li&gt;
  &lt;li&gt;그에 반해 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt; 쿼리를 실행할 때 별도의 과정이 추가적으로 발생하기 때문에 오히려 전체적인 성능은 떨어진다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;는 인덱스에 대한 데이터도 따로 추가해한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;는 인덱스에 존재하는 값은 삭제하지 않고 사용을 안한다는 표시로만 남는다.(즉, row의 수는 그대로이다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;결과적으로, 인덱스는 꼭 필요한 컬럼에만 적용해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;트랜잭션transaction&quot;&gt;트랜잭션(Transaction)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션은 작업의 &lt;strong&gt;완전성&lt;/strong&gt; 을 보장해준다.&lt;/li&gt;
  &lt;li&gt;논리적인 작업 셋을 모두 완벽하게 처리한다. 만약 처리하지 못할 경우에는 원래 상태로 복구해서 작업의 일부만 적용되는 현상을 막아주는 기능을 한다.&lt;/li&gt;
  &lt;li&gt;사용자의 입장에서는 작업의 논리적 단위로 볼 수 있고, 시스템의 입장에서는 데이터들을 접근 또는 변경하는 프로그램의 단위가 된다.&lt;/li&gt;
  &lt;li&gt;COMMIT: 하나의 트랜잭션이 정상적으로 종료될 경우 수행되는 연산&lt;/li&gt;
  &lt;li&gt;ROLLBACK: 하나의 트랜잭션이 비정상적으로 종료될 경우 수행되는 연산
    &lt;h3 id=&quot;특징-1&quot;&gt;특징&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;ACID
    &lt;h4 id=&quot;원자성atomicity&quot;&gt;원자성(Atomicity)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;만약 트랜잭션 중간에 어떤 문제가 발생했다면 트랜잭션에 해당하는 어떠한 작업 내용도 수행해되어서는 안된다. 즉, 아무런 문제가 발생하지 않았을 경우에만 모든 작업이 수행된다.
    &lt;h4 id=&quot;일관성consistency&quot;&gt;일관성(Consistency)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션이 완료된 다음의 상태에서도 트랜잭션이 일어나기 전의 상황과 동일하게 데이터의 일관성을 보장해야 한다.
    &lt;h4 id=&quot;고립성isolation&quot;&gt;고립성(Isolation)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;각각의 트랜잭션은 서로 간섭없이 독립적으로 수행되어야 한다.
    &lt;h4 id=&quot;지속성durability&quot;&gt;지속성(Durability)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션이 정상적으로 종료된 다음에는 영구적으로 데이터베이스에 작업의 결과가 저장되어야 한다.
    &lt;h3 id=&quot;상태&quot;&gt;상태&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;그림 삽입&lt;/li&gt;
  &lt;li&gt;Active: 트랜잭션의 활동 상태, 트랜잭션이 실행중이며 동작중인 상태를 말한다.&lt;/li&gt;
  &lt;li&gt;Failed: 트랜잭션 실패 상태, 트랜잭션이 더이상 정상적으로 진행할 수 없는 상태를 말한다.&lt;/li&gt;
  &lt;li&gt;Partial Committed: 트랜잭션의 Commit 명령어가 도착한 상태, 트랜잭션의 commit 이전의 sql 문이 수행되고 commit 만 남은 상태를 말한다.&lt;/li&gt;
  &lt;li&gt;Committed: 트랜잭션 완료 상태, 트랜잭션이 정상적으로 완료된 상태를 말한다.&lt;/li&gt;
  &lt;li&gt;Aborted: 트랜잭션 취소 상태, 트랜잭션이 취소되고 트랜잭션 실행 이전 데이터로 돌아간 상태를 말한다.
    &lt;h4 id=&quot;partial-committed-와-committed-의-차이&quot;&gt;Partial Committed 와 Committed 의 차이&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;Commit 요청이 들어오면 트랜잭션의 상태는 Partial Committed 상태가 된다. 이후 commit 을 문제없이 수행할 수 있으면 Committed 상태로 전이되고, 만약 오류가 발생하면 Failed 상태가 된다. 즉, Partial Committed 는 commit 요청이 들어왔을때를 말하며, Committed 는 commit 을 정상적으로 완료한 상태를 말한다.
    &lt;h3 id=&quot;병행제어concurrency-control&quot;&gt;병행제어(Concurrency Control)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;병행제어란 다중 프로그램의 이점을 활용하여 동시에 여러개의 트랜잭션을 병행 수행할 때, 동시에 실행되는 트랜잭션들이 데이터베이스의 일관성을 파괴하지 않도록 트랜잭션 간의 상호작용을 제어하는 것이다.
    &lt;h4 id=&quot;목적&quot;&gt;목적&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스의 공유를 최대화한다.&lt;/li&gt;
  &lt;li&gt;시스템의 활용도를 최대화한다.&lt;/li&gt;
  &lt;li&gt;데이터베이스의 일관성을 유지한다.&lt;/li&gt;
  &lt;li&gt;사용자에 대한 응답시간을 최소화한다.
    &lt;h4 id=&quot;문제점&quot;&gt;문제점&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;갱신 분실(Lost Update): 두 개 이상의 트랜잭션이 같은 자료를 공유하여 갱신할 때 갱신 결과의 일부가 없어지는 현상이다.&lt;/li&gt;
  &lt;li&gt;비완료 의존성(Uncommitted Dependency): 하나의 트랜잭션 수행이 실패한 후 이를 회복하기 전에 다른 트랜잭션이 그 실패한 갱신 결과를 참조하는 현상이며, 임시 갱신이라고도 한다.&lt;/li&gt;
  &lt;li&gt;모순성(Inconsistency): 두 개의 트랜잭션이 병행수행될 때 원치 않는 자료를 이용함으로써 발생하는 문제이며, 불일치 분석이라고도 한다.&lt;/li&gt;
  &lt;li&gt;연쇄 복귀(Cascading Rollback): 병행수행하는 트랜잭션들 중 어느 하나에 문제가 발생하여 Rollback 하는 경우 다른 트랜잭션도 함께 Rollback 되는 현상이다.
    &lt;h4 id=&quot;병행제어-기법의-종류&quot;&gt;병행제어 기법의 종류&lt;/h4&gt;
    &lt;ol&gt;
      &lt;li&gt;로킹(Locking, 잠금)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;로킹은 주요 데이터의 접근을 상호 배타적으로 하는 것이다.&lt;/li&gt;
  &lt;li&gt;트랜잭션들이 어떤 로킹 단위를 접근하기 전에 Lock(잠금)을 요청하여 접근을 허용해주어야만 그 로킹 단위에 접근할 수 있는 기법이다.&lt;/li&gt;
  &lt;li&gt;데이터 갱신 과정: 잠금(Lock) -&amp;gt; 실행(Excute) -&amp;gt; 해제(Unlock)&lt;/li&gt;
  &lt;li&gt;잠금 단위
    &lt;ul&gt;
      &lt;li&gt;병행제어에서 한 번에 잠금할 수 있는 단위는 데이터베이스, 테이블, 레코드, 필드 등이 있다.&lt;/li&gt;
      &lt;li&gt;단위가 커지면 Locking Overhead는 감소하지만 공유성이 낮아진다.&lt;/li&gt;
      &lt;li&gt;단위가 작아지면 Locking Overhead는 증가하지만 공유성은 높아진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;종류: 공유 잠금, 배타 잠금, 의도 잠금, 의도 공유 잠금, 배타 의도 잠금, 공유 의도 독점 잠금&lt;/li&gt;
  &lt;li&gt;2단계 잠금 규약(Two-Phase Lock Protocol)
    &lt;ul&gt;
      &lt;li&gt;각 트랜잭션의 잠금 요청과 해제 요청을 2단계로 실시한다.&lt;/li&gt;
      &lt;li&gt;직렬성을 보장하는 대표적인 잠금 규약이다.&lt;/li&gt;
      &lt;li&gt;확장 단계: 새로운 Lock은 수행할 수 있지만, Unlock은 수행할 수 없다.&lt;/li&gt;
      &lt;li&gt;축소 단계: 새로운 Unlick은 수행할 수 있지만, Lock은 수행할 수 없다.&lt;/li&gt;
      &lt;li&gt;직렬성을 보장하지만, 교착상태를 예방할 수 없다.
    2. 타임 스탬프 순서(Time Stamp Ordering)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;직렬성 순서를 결정하기 위해 트랜잭션 간의 처리 순서를 선택하는 기법 중 가장 보편적인 방법이다.&lt;/li&gt;
  &lt;li&gt;트랜잭션과 트랜잭션이 읽거나 갱신한 데이터에 대해 트랜잭션이 실행을 시작하기 전에 시간표(Time Stamp)를 만들어 정해진 시간에 따라 작업을 수행하는 기법이다.&lt;/li&gt;
  &lt;li&gt;교착상태가 발생하지 않는다.
    &lt;ol&gt;
      &lt;li&gt;최적 병행 수행(검증 기법, 확인 기법, 낙관적 기법)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;병행수행하고자 하는 트랜잭션의 대부분이 읽기 전용(Read only) 트랜잭션일 경우, 트랜잭션 간의 충돌방생률이 매우 낮으므로 병행제어 기법을 사용하지 않아도 시스템의 일관성을 유지할 수 있다는 점을 이용하는 기법이다.
    &lt;ol&gt;
      &lt;li&gt;다중 버전 기법&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;타임 스탬프의 개념을 이용하는 기법으로, 다중 버전 타임 스탬프 기법이라고도 한다.&lt;/li&gt;
  &lt;li&gt;타임 스탬프 기법은 트랜잭션 및 데이터들의 이용 시간을 시간표로 관리하지만, 다중 버전 기법은 갱신될 때마다의 버전을 만들어 관리한다.
    &lt;h3 id=&quot;회복recovery&quot;&gt;회복(Recovery)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 운영 도중 예기치 못한 장애(Failure)가 발생한 경우, 데이터베이스를 장애 발생 이전의 일관된 상태(Consistent State)로 복원시키는 것이다.&lt;/li&gt;
  &lt;li&gt;데이터베이스 관리 시스템에 회복 기능이 없을 경우, 데이터베이스에 저장된 내용을 신뢰할 수 없으므로 핵심적인 역할을 담당하는 회복 관리기(Recovery Manager)가 필요하다.
    &lt;h4 id=&quot;장애failure-유형&quot;&gt;장애(Failure) 유형&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 장애(Action Failure): 사용자의 실수나 무결성 규칙 위반 등 질의 실행이 실패한 경우.&lt;/li&gt;
  &lt;li&gt;트랜잭션 장애(Transaction Failure): 내부적인 오류나 Deadlock과 같은 오류로 정상적으로 트랜잭션을 실행할 수 없는 경우.&lt;/li&gt;
  &lt;li&gt;시스템 장애(System Failure): 전원, 하드웨어, 소프트웨어 등의 고장으로 모든 트랜잭션을 사용할 수 없는 경우.&lt;/li&gt;
  &lt;li&gt;미디어 장애(Media Failure): 저장장치의 손상이나 오류로 데이터베이스의 일부 또는 전체가 물리적으로 손상되는 경우.
    &lt;h4 id=&quot;회복-관리기recovery-manager&quot;&gt;회복 관리기(Recovery Manager)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;Log, Memory Dump 등을 이용하여 회복을 수행하는 DBMS의 핵심 구성요소이다.&lt;/li&gt;
  &lt;li&gt;트랜잭션이 성공적으로 완료되지 않았을 때, Log를 이용하여 트랜잭션이 데이터베이스의 모든 변화를 취소(Undo)하여 회복한다.&lt;/li&gt;
  &lt;li&gt;트랜잭션이 성공적으로 완료되었으나 저장장치에 반영되지 않았을 때, Log를 이용하여 재작업(Redo)를 수행한다.
    &lt;h4 id=&quot;회복-기법&quot;&gt;회복 기법&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;연기 갱신(Differed Update)
    &lt;ul&gt;
      &lt;li&gt;트랜잭션이 성공적으로 종료될 때까지 데이터베이스에 대한 실질적인 갱신을 연기한다.&lt;/li&gt;
      &lt;li&gt;실행되는 동안 변경된 내용은 Log에 보관하며 부분완료 시점에 Log에 저장된 내용을 데이터베이스에 반영한다.&lt;/li&gt;
      &lt;li&gt;내용을 Log에 저장하고 데이터베이스에 적용을 하지 않기 때문에 장애가 발생하면 Redo 작업만을 수행하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;즉각 갱신(Immediate Update)
    &lt;ul&gt;
      &lt;li&gt;트랜잭션이 데이터를 변경하면 트랜잭션이 부분 완료가 되기 전이라도 데이터베이스에 바로 반영한다.&lt;/li&gt;
      &lt;li&gt;장애를 대비하여 모든 변경 내용을 Log에 저장한다.&lt;/li&gt;
      &lt;li&gt;Undo, Redo 모두 수행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그림자 페이지(Shadow Paging)
    &lt;ul&gt;
      &lt;li&gt;갱신 이전의 데이터베이스를 페이지단위로 구성하여 복사해놓고, 실제 페이지를 대상으로 트랜잭션에 대한 변경 작업을 반영한다.&lt;/li&gt;
      &lt;li&gt;장애가 발생하여 Rollback을 할 때, 해당 페이지만 복구한다.&lt;/li&gt;
      &lt;li&gt;Log와 Undo, Redo 모두 수행할 필요가 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;검사점(Check Point)
    &lt;ul&gt;
      &lt;li&gt;Undo, Redo를 수행할 때 Log 전체를 조사해야하는 것을 피하기 위한 기법이다.&lt;/li&gt;
      &lt;li&gt;트랜잭션 실행 중 주기적으로 변경 내용과 검사점을 같이 Log에 저장한다.&lt;/li&gt;
      &lt;li&gt;장애가 발생할 때, 전체 Log를 조회하지 않고 가장 최근 검사점을 기준으로 회복 작업을 수행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;미디어 회복(Media Recovery)
    &lt;ul&gt;
      &lt;li&gt;데이터베이스의 내용을 주기적으로 안전한 저장소에 덤프한다.&lt;/li&gt;
      &lt;li&gt;장애가 발생하면 가장 최근의 덤프를 디스크에 적재하고, Log를 조회하여 최근의 트랜잭션에 대하여 Redo를 수행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;고급-데이터베이스&quot;&gt;고급 데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;분산-데이터베이스distributed-database&quot;&gt;분산 데이터베이스(Distributed Database)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;논리적으로 같은 시스템에 속하지만, 물리적으로 분산되어있는 데이터베이스
    &lt;h4 id=&quot;분산-데이터베이스-시스템-구성요소&quot;&gt;분산 데이터베이스 시스템 구성요소&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;분산 처리기: 지리적으로 분산되어있는 컴퓨터 시스템, 자체 처리 능력을 가진다.&lt;/li&gt;
  &lt;li&gt;분산 데이터베이스: 지리적으로 분산되어있는 데이터베이스&lt;/li&gt;
  &lt;li&gt;통신 네트워크: 분산 처리기들을 통신망으로 연결해 하나의 시스템처럼 작동할 수 있는 네트워크
    &lt;h4 id=&quot;목표&quot;&gt;목표&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;위치 투명성(Location Transparency): 접근하려는 데이터베이스의 실제 위치를 알 필요는 없다.&lt;/li&gt;
  &lt;li&gt;중복 투명성(Replication Transparency): 동일한 데이터가 여러 곳에 중복되어도 하나의 데이터만 존재하는 것처럼 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;병행 투명성(Concurrency Transparency): 다수의 트랜잭션들이 동시에 수행되어도 서로 영향을 주지 않는다.&lt;/li&gt;
  &lt;li&gt;장애 투명성(Failure Transparency): 각종 장애에도 불구하고 트랜잭션은 정확히 수행된다.
    &lt;h3 id=&quot;멀티미디어-데이터베이스multimedia-database&quot;&gt;멀티미디어 데이터베이스(Multimedia Database)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;텍스트, 그래픽, 정지화상, 동영상, 음성 등이 복합적으로 구성된 데이터베이스
    &lt;h3 id=&quot;주기억장치-데이터베이스main-memory-database&quot;&gt;주기억장치 데이터베이스(Main Memory Database)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 전체를 주기억장치에 저장한 후, 데이터베이스 연산을 수행하는 시스템&lt;/li&gt;
  &lt;li&gt;디스크 I/O가 발생하지 않는다.
    &lt;h3 id=&quot;데이터-웨어하우스data-warehouse&quot;&gt;데이터 웨어하우스(Data Warehouse)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;다량의 데이터를 효과적으로 분석하여 정보화하고, 이를 계층의 사용자가 효율적으로 사용하도록 하는 데이터베이스&lt;/li&gt;
  &lt;li&gt;다양한 원본 데이터베이스로부터 정제되어 추출된 데이터만을 저장하고 필요한 인덱스를 생성한다.&lt;/li&gt;
  &lt;li&gt;빠르고 정확한 의사결정을 도와준다.
    &lt;h3 id=&quot;데이터-마트data-mart&quot;&gt;데이터 마트(Data Mart)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;전사적으로 구축된 데이터 웨어하우스로부터, 특정 주제나 부서 중심으로 구성된 단일 주제의 데이터 웨어하우스
    &lt;h3 id=&quot;데이터-마이닝data-mining&quot;&gt;데이터 마이닝(Data Mining)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 웨어하우스에 저장된 데이터 집합에서 사용자의 요구에 따라 유용하고 가능성 있는 정보를 발견하기 위한 기법
    &lt;h4 id=&quot;기법-종류&quot;&gt;기법 종류&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;연관, 연속, 분류, 클러스터링, 특성화, 패턴 분석, 경향 분석 등
    &lt;h3 id=&quot;olaponline-analytical-processing&quot;&gt;OLAP(Online Analytical Processing)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;다차원으로 이루어진 데이터로부터, 통계적인 요약 정보를 분석하여 의사결정에 활용하는 방식&lt;/li&gt;
  &lt;li&gt;데이터 웨어하우스, 데이터 마트 같은 시스템과 상호 연관되는 시스템&lt;/li&gt;
  &lt;li&gt;데이터 웨어하우스의 데이터를 전략적인 정보로 변환시키는 역할&lt;/li&gt;
  &lt;li&gt;중간 매개체 없이 이용자들이 직접 컴퓨터를 이용해 데이터에 접근하는데 있어서 필수적인 시스템
    &lt;h4 id=&quot;olap-연산&quot;&gt;OLAP 연산&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;Roll-up: 더 요약된 정보보기&lt;/li&gt;
  &lt;li&gt;Drill-down: 더 구체적인 정보보기&lt;/li&gt;
  &lt;li&gt;Pivoting: 보고서의 행/열/페이지 차원을 바꾸어 보는 기능&lt;/li&gt;
  &lt;li&gt;Slicing: 다차원 데이터 항목들을 다양한 각도에서 조회하고 자유롭게 비교하는 기능&lt;/li&gt;
  &lt;li&gt;Dicing: Slicing을 더 세분화하는 기능
    &lt;h4 id=&quot;olap-종류&quot;&gt;OLAP 종류&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;ROLAP(Relational-OLAP): 관계형 데이터베이스와 관계형 질의어를 사용하여 다차원 데이터를 저장하고 분석한다.&lt;/li&gt;
  &lt;li&gt;MOLAP(Multi-dimension OLAP)
    &lt;ul&gt;
      &lt;li&gt;다차원 데이터를 저장하기 위해 특수한 구조의 다차원 데이터베이스를 사용한다.&lt;/li&gt;
      &lt;li&gt;검색 속도를 위해 큐브 캐시(Cube Cache)라고 하는 주기억장치 속에 데이터 큐브를 저장한다.&lt;/li&gt;
      &lt;li&gt;데이터 큐브(Data Cube): 특정 목적의 OLAP에서 사용하기 위한 큐브형태의 다차원 논리적 구조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HOLAP(Hybrid OLAP)
    &lt;ul&gt;
      &lt;li&gt;ROLAP와 MOLAP의 특성을 모두 가지고 있다.&lt;/li&gt;
      &lt;li&gt;빠른 검색을 필요할 때는 요약을 메모리에 저장하고 다른 요약들은 관계형 데이터베이스에 저장한다.
        &lt;h3 id=&quot;oltponline-transaction-processing&quot;&gt;OLTP(Online Transaction Processing)&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;온라인 업무 처리 형태의 하나로 네트워크 상에서 다수의 유저가 데이터베이스의 데이터를 갱신, 검색하는 등의 트랜잭션을 처리하는 방식이다.&lt;/li&gt;
  &lt;li&gt;OLTP 시스템은 일반적으로 빠른 응답 시간을 요구하며, 개개의 레코드를 효율적으로 조회하고 수정할 수 있도록 정규화 되어 있다.
    &lt;h3 id=&quot;oltp와-olap-비교&quot;&gt;OLTP와 OLAP 비교&lt;/h3&gt;
    &lt;p&gt;|        구분        	|                OLTP                	|                OALP                	|
|:——————:	|:———————————-:	|:———————————-:	|
|    데이터의 구조   	|    복잡(운영시스템 계산에 적합)    	|       단순(사업 분석에 적합)       	|
|    데이터의 갱신   	|             순간적/동적            	|             주기적/정적            	|
|      응답 시간     	|         2,3초 ~ 몇 초 이내         	|            수 초 ~ 몇 분           	|
|    데이터의 범위   	|          과거 30일 ~ 90일          	|           과거 5년 ~ 10년          	|
|     데이터 성격    	| 정규/핵심 업무 데이터, 변경 어려움 	| 비정규/일기 전용 데이터, 변경 용이 	|
|    데이터의 크기   	|            수 Giga Byte            	|            수 Tera Byte            	|
|    데이터의 내용   	|             상세 데이터            	|    기록 보관된 요약/계산 데이터    	|
|     데이터 특성    	|      트랜잭션 중심, 중복 배제      	|    주제(subject) 중심, 중복 허용   	|
| 데이터 액세스 빈도 	|                높음                	|           보통 혹은 낮음           	|
|   데이터의 사용법  	|      고도로 구조화된 연속 처리     	|     고도로 비구조화된 분석 처리    	|
|     쿼리의 성격    	|          예언 가능, 주기적         	|       예측하기 어려움, 특수함      	|&lt;/p&gt;
    &lt;h3 id=&quot;odbcopen-database-connectivity&quot;&gt;ODBC(Open Database Connectivity)&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;프로그램과 데이터베이스의 종류에 관계업이 자유롭게 사용할 수 있도록 MS에서 만든 API&lt;/li&gt;
  &lt;li&gt;구조상 데이터베이스 바로 위에 ODBC가 위치한다.
    &lt;h4 id=&quot;구조&quot;&gt;구조&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;Application: ODBC API를 이용해 데이터베이스에 접근한다.&lt;/li&gt;
  &lt;li&gt;Driver Manager: 애플리케이션과 ODBC Driver 간의 통신을 관리하는 라이브러리&lt;/li&gt;
  &lt;li&gt;DSN(Domain Service Name): 서버에 연결할 때 필요한 드라이버와 데이터베이스 정보를 저장한다.&lt;/li&gt;
  &lt;li&gt;ODBC Driver: ODBC API가 지원하는 함수를 구현하는 라이브러리&lt;/li&gt;
  &lt;li&gt;데이터베이스: ODBC Driver에서 요청한 SQL에 대한 결과를 반환한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="개념 정리" /><summary type="html">데이터베이스 개념 정리</summary></entry><entry><title type="html">[Database]SQL 개념 정리</title><link href="https://codemcd.github.io/pages/CODEMCD/database/Database-SQL-%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="[Database]SQL 개념 정리" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/database/Database-SQL%20%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/database/Database-SQL-%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC/">&lt;h1 id=&quot;sqlstructed-query-language&quot;&gt;SQL(Structed Query Language)&lt;/h1&gt;
&lt;h2 id=&quot;sql에서-지원하는-기본-데이터-타입&quot;&gt;SQL에서 지원하는 기본 데이터 타입&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;정수(Integer): INT(4Byte), SMALLINT(2Byte)&lt;/li&gt;
  &lt;li&gt;실수(Float): FLOAT, REAL, DOUBLE PRECISION&lt;/li&gt;
  &lt;li&gt;형식화된 숫자: DEC(i, j) (i = 전체 자릿수, j = 소수부 자릿수)&lt;/li&gt;
  &lt;li&gt;고정길이 문자: CHAR(n) (n = 문자수)&lt;/li&gt;
  &lt;li&gt;가변길이 문자: VARCHAR(n) (n = 최대 문자 수)&lt;/li&gt;
  &lt;li&gt;고정길이 비트 열(Bit String): BIT(n)&lt;/li&gt;
  &lt;li&gt;가변길이 비트 열: VARBIT(n)&lt;/li&gt;
  &lt;li&gt;날짜: DATE&lt;/li&gt;
  &lt;li&gt;시간: TIME&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ddldata-define-language&quot;&gt;DDL(Data Define Language)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DDL로 정의된 내용은 메타데이터가 되며, 시스템카탈로그에 저장한다.&lt;/li&gt;
  &lt;li&gt;CREATE, ALTER, DROP 명령문이 존재한다.
    &lt;h3 id=&quot;create&quot;&gt;CREATE&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;스키마, 도메인 테이블, 뷰 인덱스를 정의한다.
    &lt;h4 id=&quot;create-schema&quot;&gt;CREATE SCHEMA&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;스키마를 정의하는 명령문&lt;/li&gt;
  &lt;li&gt;스키마는 하나의 응용(사용자)에 속하는 테이블과 기타 구성 요소등을 그룹짓기 위함이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE SCHEMA 스키마명 AUTHORIZATION 사용자ID;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ID가 홍길동인 사용자의 스키마 ‘대학교’를 정의하는 SQL문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE SCHEMA 대학교 AUTHORIZATION 홍길동;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;create-domain&quot;&gt;CREATE DOMAIN&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;도메인을 정의하는 명령문&lt;/li&gt;
  &lt;li&gt;도메인은 하나의 속성이 취할 수 있는 동일한 타입의 원자값들의 집합이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DOMAIN 도메인명 데이터타입
  [DEFAULT 기본값]
  [CONSTRAINT 제약조건명 CHECK (범위값)];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;데이터타입: SQL에서 지원하는 데이터 타입&lt;/li&gt;
  &lt;li&gt;기본값: 데이터를 입력하지 않았을 때 자동으로 입력되는 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;성별을 ‘남’ 또는 ‘여’와 같은 정해진 1개의 문자로 표현되는 도메인 SEX를 정의하는 SQL문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DOMAIN SEX CHAR(1)
  DEFAULT '남'
  CONSTRAINT VALID-SEX CHECK (VALUE IN('남', '여'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-table&quot;&gt;CREATE TABLE&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;테이블을 정의하는 명령문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE 테이블명
  (속성명 데이터타입[NOT NULL], ...
  [, PRIMARY KEY (기본키 속성명, ...)]
  [, UNIQUE (대채키 속성명, ...)]
  [, FOREIGN KEY (외래키 속성명, ...)
    REFERENCES 참조테이블(기본키 속성명, ...)]
    [ON DELETE 옵션]
    [ON UPDATE 옵션]
  [, CONSTRAINT 제약조건명][CHECK (조건식)]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;옵션 종류
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NO ACTION&lt;/code&gt;: 참조 테이블에 변화가 있어도 기본 테이블에는 아무런 조취를 취하지 않는다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CASCADE&lt;/code&gt;: 참조 테이블의 튜플이 삭제되거나 속성이 변경되면 그에 해당하는 기본 테이블의 모든 튜플이 그에 맞게 갱신된다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SET NULL&lt;/code&gt;: 참조 테이블에 변화가 생기면 기본 테이블의 관련 튜플의 속성 값을 NULL로 변경한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SET DEFAULT&lt;/code&gt;: 참조 테이블에 변화가 있으면 기본 테이블의 관련 튜플의 속성 값을 기본값으로 변경한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONSTRAINT&lt;/code&gt;: 제약  조건의 이름을 지정하며, 반드시 지정할 필요는 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이름, 학번, 전공, 성별, 생년월일로 구성된 &lt;학생&gt; 테이블을 정의하는 SQL문
&lt;/학생&gt;    &lt;ul&gt;
      &lt;li&gt;이름은 NULL이 올 수 없고, 학번은 기본키이다.&lt;/li&gt;
      &lt;li&gt;전공은 &lt;학과&gt; 테이블의 학과코드를 참조하는 외래키로 사용된다.&lt;/학과&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;학과&gt; 테이블에서 삭제가 일어나면 관련된 튜플들의 전공 값을 NULL로 만든다.
&lt;/학과&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;학과&gt; 테이블에서 학과코드가 변경되면 전공 값도 같은 값으로 변경된다.
&lt;/학과&gt;
      &lt;/li&gt;
      &lt;li&gt;생년월일은 1980-01-01 이후의 데이터만 저장할 수 있다.&lt;/li&gt;
      &lt;li&gt;제약 조건의 이름은 ‘생년월일제약’으로 한다.&lt;/li&gt;
      &lt;li&gt;각 속성의 데이터형은 적당하게 지정한다. 단 성별은 도메인 ‘SEX’를 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE 학생
  (이름 VARCHAR(15) NOT NULL,
  학번 CHAR(8),
  전공 CHAR(5),
  성별 SEX,
  생년월일 DATE,
  PRIMARY KEY(학번),
  FOREIGN KEY(전공) REFERENCES 학과(학과코드)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT 생년월일제약 CHECK(생년월일 &amp;gt;= '1980-01-01'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-view&quot;&gt;CREATE VIEW&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;뷰를 정의하는 명령문&lt;/li&gt;
  &lt;li&gt;뷰(View)는 하나 이상의 기본 테이블로부터 유도되는 이름을 갖는 가상 테이블이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE VIEW 뷰명[(속성명[, 속성명, ...])]
AS SELECT문;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;문을 서브 쿼리로 사용하여 SELECT문의 결과로서 뷰를 생성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;고객&gt; 테이블에서 주소가 '안산시'인 고객들의 성명과 전화번호를 '안산고객'이라는 뷰로 정의한다.

&lt;/고객&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE VIEW 안산고객(성명, 전화번호)
AS SELECT 성명, 전화번호
FROM 고객
WHERE 주소='안산시';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-index&quot;&gt;CREATE INDEX&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;인덱스를 정의하는 명령문&lt;/li&gt;
  &lt;li&gt;인덱스는 검색을 빠르게 하기 위해 만든 보조적인 데이터 구조이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE [UNIQUE] INDEX &amp;lt;인덱스명&amp;gt;
  ON 테이블명({속성명 [ASC | DESC] [,속성명 [ASC | DESC]]})
  [CLUSTER];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNIQUE&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;사용된 경우: 중복 값이 없는 속성으로 인덱스를 생성한다.&lt;/li&gt;
      &lt;li&gt;생략된 경우: 중복 값을 허용하는 속성으로 인덱스를 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정렬 여부 지정
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ASC&lt;/code&gt;: 오름차순 정렬&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DESC&lt;/code&gt;: 내림차순 정렬&lt;/li&gt;
      &lt;li&gt;생략된 경우: 오름차순으로 정렬된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CLUSTER&lt;/code&gt;: 지정된 키에 따라 튜플들으르 그룹으로 지정하기 위해 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;고객&gt; 테이블에서 UNIQUE한 특성을 갖는 고객번호 속성에 대해 내림차순으로 정렬하여 '고객번호_idx'라는 이름으로 인덱스를 정의한다.

&lt;/고객&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE UNIQUE INDEX 고객번호_idx
  ON 고객(고객번호 DESC);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;alter&quot;&gt;ALTER&lt;/h3&gt;
&lt;h4 id=&quot;alter-table&quot;&gt;ALTER TABLE&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;테이블에 대한 정의를 변경하는 명령문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER TABLE 테이블명 ADD 속성명 데이터타입 [DEFAULT '기본값'];
ALTER TABLE 테이블명 ALTER 속성명 [SET DEFAULT '기본값'];
ALTER TABLE 테이블명 DROP COLUMN 속성명 [CASCADE];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;: 새로운 속성을 추가한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER&lt;/code&gt;:  속성의 기본값을 변경한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DROP COLUMN&lt;/code&gt;: 속성을 제거한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;학생&gt; 테이블에 최대 3문자로 구성되는 학년 속성을 추가하는 SQL문

&lt;/학생&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER TABLE 학생 ADD 학년 VARCHAR(3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;drop&quot;&gt;DROP&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스키마, 도메인, 테이블, 뷰, 인덱스, 트리거를 제거하는 명령문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DROP SCHEMA 스키마명 [CASCADE | RESTRICT];
DROP DOMAIN 도메인명 [CASCADE | RESTRICT];
DROP TABLE 테이블명 [CASCADE | RESTRICT];
DROP VIEW 뷰명 [CASCADE | RESTRICT];
DROP INDEX 인덱스명 [CASCADE | RESTRICT];
DROP TRIGGER 트리거명 [CASCADE | RESTRICT];
DROP CONSTRAINT 제약조건명;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CASCADE&lt;/code&gt;: 제거할 개체를 참조하는 다른 모든 개체를 함께 제거한다. 즉, 주 테이블의 데이터 제거 시, 각각의 외래키와 관계를 맺고 있는 모든 데이터를 함께 제거한다.(참조 무결성 제약 조건을 위함)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTRICT&lt;/code&gt;: 다른 개체가 제거할 개체를 참조중일 경우 제거가 취소된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;select&quot;&gt;SELECT&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;테이블을 구성하는 튜플들 중에서 전체 또는 조건을 만족하는 튜플을 검색하여 주기억장치에 임시 테이블로 구성하는 명령문이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [PREDICATE] [테이블명.]속성명[ AS 별칭][, [테이블명.]속성명, ...]
FROM 테이블명[, 테이블명, ...]
[WHERE 조건]
[GROUP BY 속성명[, 속성명, ...]]
[HAVING 조건]
[ORDER BY 속성명 [ASC | DESC][, 속성명 [ASC | DESC], ...]];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PREDICATE&lt;/code&gt;: 검색할 튜플을 제한할 목적으로 사용되는 조건이다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ALL&lt;/code&gt;: 모든 튜플들을 검삭할 때 사용되며, 기본값이다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt;: 중복된 튜플들을 제거할 때 사용된다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCTROW&lt;/code&gt;: 중복된 튜플을 제거하지만, 선택된 속성의 값이 아닌 튜플의 전체 값을 대상으로 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AS&lt;/code&gt;: 속성 및 연산의 이름을 다른 제목으로 표시하기 위해 사용된다.&lt;/li&gt;
  &lt;li&gt;FROM절: 검색할 데이터가 들어 있는 테이블명을 기술한다.&lt;/li&gt;
  &lt;li&gt;WHERE절: 검색할 조건을 기술한다.&lt;/li&gt;
  &lt;li&gt;GROUP BY절: 특정 속성을 기준으로 그룹화하여 검색할 때 사용된다. 일반적으로 그룹 함수와 함께 사용한다.&lt;/li&gt;
  &lt;li&gt;HAVING절: 그룹에 대한 조건을 기술한다.&lt;/li&gt;
  &lt;li&gt;ORDER BY절: 특정 속성을 기분으로 정렬하여 검색할 때 사용된다.
    &lt;h3 id=&quot;하위-질의&quot;&gt;하위 질의&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;여가 활동=&quot;&quot;&gt; 테이블에서 취미가 '나이트댄스'인 사원에 대해 &lt;사원&gt; 테이블에서 해당 사원의 이름과 주소를 검색하는 SQL문

&lt;/사원&gt;&lt;/여가&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 이름, 주소
FROM 사원
WHERE 이름 IN(SELECT 이름 FROM 여가활동 WHERE 취미='나이트댄스');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;복수-테이블-검색&quot;&gt;복수 테이블 검색&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;경력이 10년 이상인 사원의 이름, 부서, 취미, 경력을 검색하는 SQL문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 사원.이름, 사원.부서, 여가활동.취미, 여가활동.경력
FROM 사원, 여가활동
WHERE 여가활동.경력 &amp;gt;= 10 AND 사원.이름 = 여가활동.이름;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;통합union-질의&quot;&gt;통합(UNION) 질의&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;UNION은 일반 집합 이론에서의 합집합과 같다.&lt;/li&gt;
  &lt;li&gt;두 테이블을 합치면 두 테이블에 모두 속해 있는 튜플은 중복이 제거되어 1개만 표시된다.&lt;/li&gt;
  &lt;li&gt;사원들의 명단이 &lt;임원&gt; 테이블과 &lt;직원&gt; 테이블에 저장되어 있다. 두 테이블을 통합하는 SQL문(중복 제거)&lt;/직원&gt;&lt;/임원&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT *
FROM 임원
UNION SELECT * 직원;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;join&quot;&gt;JOIN&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;조인은 2개의 테이블에 대해 연관된 튜플들을 결합하여, 하나의 새로운 릴레이션을 반환한다.&lt;/li&gt;
  &lt;li&gt;조인은 크게 INNER JOIN과 OUTER JOIN으로 구분된다.
    &lt;h3 id=&quot;inner-join&quot;&gt;INNER JOIN&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;INNER JOIN은 일반적으로 EQUI JOIN과 NON-EQUI JOIN으로 구분된다.
    &lt;h4 id=&quot;equi-join&quot;&gt;EQUI JOIN&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;EQUI JOIN은 JOIN 대상 테이블에서 공통 속성을 기준으로 ‘=’(equal)비교에 의해 같은 값을 가지는 행을 연결하여 결과를 생성하는 방법이다.&lt;/li&gt;
  &lt;li&gt;중복된 속성을 제거하여 같은 속성을 한 번만 표기하는 방법을 NATURAL JOIN이라 한다.&lt;/li&gt;
  &lt;li&gt;WHERE절을 이용한 EQUI JOIN&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1, 테이블명2, ...
WHERE 테이블명1.속성명 = 테이블명2.속성명;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;NATURAL JOIN을 이용한 EQUI JOIN&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1 NATURAL JOIN 테이블명2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JOIN ~ USING절을 이용한 EQUI JOIN&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1 JOIN 테이블명2 USING(속성명);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;학생&gt; 테이블과 &lt;학과&gt; 테이블에서 학과코드 값이 같은 튜플을 JOIN하여 학번, 이름, 학과코드, 학과명을 출력하는 SQL문

&lt;/학과&gt;&lt;/학생&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 학번, 이름, 학생.학과코드, 학과명
FROM 학생, 학과
WHERE 학생.학과코드 = 학과.학과코드;

SELECT 학번, 이름, 학생.학과코드, 학과명
FROM 학생 NATURAL JOIN 학과;

SELECT 학번, 이름, 학생.학과코드, 학과명
FROM 학생 JOIN 학과 USING(학과코드);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;non-equi-join&quot;&gt;NON-EQUI JOIN&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;NON-EQUI JOIN은 JOIN조건에 ‘=’ 조건이 아닌 나머지 비교 연산자인 ‘&amp;gt;’, ‘&amp;lt;’, ‘&amp;lt;=’, ‘&amp;gt;=’ 연산자를 사용하는 방법이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;학생&gt; 테이블과 &lt;성적등급&gt; 테이블을 JOIN하여 각 학생의 학번, 이름, 성적, 등급을 출력하는 SQL문

&lt;/성적등급&gt;&lt;/학생&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 학번, 이름, 성적, 등급
FROM 학생, 성적등급
WHERE 학생.성적 BETWEEN 성적등급.최저 AND 성적등급.최고;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;outer-join&quot;&gt;OUTER JOIN&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;OUTER JOIN은 릴레이션에서 JOIN조건에 만족하지 않는 튜플도 결과로 출력하기 위한 JOIN 방법이다.
    &lt;h4 id=&quot;left-outer-join&quot;&gt;LEFT OUTER JOIN&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;INNER JOIN의 결과를 구한 후, 우측 항 릴레이션과 맞지 않는 좌측 항 릴레이션의 튜플에 NULL값을 대입한다.&lt;/li&gt;
  &lt;li&gt;좌측 릴레이션은 모두 출력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1 LEFT OUTER JOIN 테이블명2
ON 테이블명1.속성명 = 테이블명2.속성명;

SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1, 테이블명2
WHERE 테이블명1.속성명 = 테이블명2.속성명(+);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;right-outer-join&quot;&gt;RIGHT OUTER JOIN&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;INNER JOIN의 결과를 구한 후, 좌측 항 릴레이션과 맞지 않는 우측 항 릴레이션의 튜플에 NULL값을 대입한다.&lt;/li&gt;
  &lt;li&gt;우측 릴레이션은 모두 출력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1 RIGHT OUTER JOIN 테이블명2
ON 테이블명1.속성명 = 테이블명2.속성명;

SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1, 테이블명2
WHERE 테이블명1.속성명(+) = 테이블명2.속성명;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;full-outer-join&quot;&gt;FULL OUTER JOIN&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;LEFT OUTER JOIN과 RIGHT OUTER JOIN을 합쳐 놓은 것이다.&lt;/li&gt;
  &lt;li&gt;양쪽 릴레이션이 모두 출력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [테이블명1.]속성명, [테이블명2.]속성명, ...
FROM 테이블명1 FULL OUTER JOIN 테이블명2
ON 테이블명1.속성명 = 테이블명2.속성명;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;self-join&quot;&gt;SELF JOIN&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SELF JOIN은 같은 테이블에서 2개의 속성을 연결하여 EQUI JOIN을 하는 방법이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT [별칭1.]속성명, [별칭2.]속성명, ...
FROM 테이블명1 [AS] 별칭1 JOIN 테이블명1 [AS] 별칭2
ON 별칭1.속성명 = 별칭2.속성명;

SELECT [별칭1.]속성명, [별칭2.]속성명, ...
FROM 테이블명1 [AS] 별칭1, 테이블명1 [AS] 별칭2
WHERE 별칭1.속성명 = 별칭2.속성명;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dmldate-manipulation-language&quot;&gt;DML(Date Manipulation Language)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DML은 데이터베이스 사용자가 응용 프로그램이나 질의어를 통해 저장된 데이터를 실질적으로 관리하는데 사용되는 언어이다.&lt;/li&gt;
  &lt;li&gt;DML은 데이터베이스 사용자와 데이터베이스 관리 시스템 간의 인터페이스를 제공한다.&lt;/li&gt;
  &lt;li&gt;INSERT, DELETE, UPDATE 명령문이 있다.
    &lt;h3 id=&quot;insert문&quot;&gt;INSERT문&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;테이블에 새로운 튜플을 삽입할 때 사용하는 명령문이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO 테이블명[(속성명1, 속성명2, ...)]
VALUES (데이터1, 데이터2, ...);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;사원&gt; 테이블에 이름이 &quot;이순신&quot;이고, 부서가 &quot;기획&quot;인 사원을 삽입하는 SQL문

&lt;/사원&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO 사원(이름, 부서) VALUES ('이순신', '기획');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;사원&gt; 테이블에 있는 편집 부서의 모든 튜플을 &amp;lt;편집부원(이름, 생일, 주소, 기본급)&amp;gt; 테이블에 삽입하는 SQL문

&lt;/사원&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO 편집부원(이름, 생일, 주소, 기본급)
SELECT 이름, 생일, 주소, 기본급 FROM 사원 WHERE 부서='편집';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;delete문&quot;&gt;DELETE문&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;테이블에 있는 튜플들 중에서 특정 튜플을 삭제할 때 사용하는 명령문이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE FROM 테이블명 WHERE 조건;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;사원&gt; 테이블에서 이름이 &quot;임꺽정&quot;인 튜플을 삭제하는 SQL문

&lt;/사원&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE FROM 사원 WHERE 이름='임꺽정';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;사원&gt; 테이블의 모든 튜플을 삭제하는 SQL문

&lt;/사원&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE FROM 사원;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;update문&quot;&gt;UPDATE문&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;테이블에 있는 튜플들 중에서 특정 튜플의 내용을 갱신할 때 사용하는 명령문이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UPDATE 테이블명
SET 속성명=데이터[, 속성명=데이터, ...]
WHERE 조건;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;사원&gt; 테이블에서 홍길동의 주소를 &quot;퇴계동&quot;으로 갱신하는 SQL문

&lt;/사원&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UPDATE 사원 SET 주소='퇴계동' WHERE 이름='홍길동';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;사원&gt; 테이블에서 황진이의 부서를 &quot;기획&quot;으로 변경하고 기본급을 5 인상하는 SQL문

&lt;/사원&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UPDATE 사원 SET 부서='기획', 기본급=기본급+5 WHERE 이름='황진이';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dcldata-control-language&quot;&gt;DCL(Data Control Language)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DCL은 데이터의 보안, 무결성, 회복, 병행 제어 등을 정의하는데 사용하는 언어이다.&lt;/li&gt;
  &lt;li&gt;DCL은 데이터베이스 관리자(DBA)가 데이터 관리를 목적으로 사용한다.&lt;/li&gt;
  &lt;li&gt;COMMIT, ROLLBACK, GRANT, REVOKE 명령문이 있다.
    &lt;h3 id=&quot;commit&quot;&gt;COMMIT&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션의 모든 변경 내용들을 영구적으로 데이터베이스에 반영하는 명령어이다.
    &lt;h3 id=&quot;rollback&quot;&gt;ROLLBACK&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;변경된 모든 내용들을 취소하고 데이터베이스를 이전 상태로 되돌리는 명령어이다.&lt;/li&gt;
  &lt;li&gt;트랜잭션의 일부를 성공적으로 끝내지 못하면 데이터베이스가 비일관성인 상태를 가질 수 있으므로 모든 내용들을 취소해야한다.
    &lt;h3 id=&quot;grant&quot;&gt;GRANT&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 관리자가 데이터베이스 사용자에게 권한을 부여하기 위한 명령어이다.&lt;/li&gt;
  &lt;li&gt;사용자등급 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRANT 사용자등급 TO 사용자ID리스트[IDENTIFIED BY 암호];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 등급: DBA(데이터베이스 관리자), RESOURCE(데이터베이스 및 테이블 생성 가능자), CONNECT(단순 사용자)&lt;/li&gt;
  &lt;li&gt;테이블 및 속성에 대한 권한 부여&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRANT 권한리스트 ON 개체 TO 사용자 [WITH GRANT OPTION];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;revoke&quot;&gt;REVOKE&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;권한 취소를 위한 명령어이다.&lt;/li&gt;
  &lt;li&gt;사용자등급 해제&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REVOKE 사용자등급 FROM 사용자ID리스트;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;테이블 및 속성에 대한 권한 취소&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REVOKE [GRANT OPTION FOR] 권한리스트 ON 개채 FROM 사용자 [CASCADE];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="개념 정리" /><summary type="html">데이터베이스 SQL 개념 정리 및 예제</summary></entry><entry><title type="html">[DataStructure]정렬 알고리즘 비교</title><link href="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B9%84%EA%B5%90/" rel="alternate" type="text/html" title="[DataStructure]정렬 알고리즘 비교" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%20%EB%B9%84%EA%B5%90</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B9%84%EA%B5%90/">&lt;h1 id=&quot;정렬-알고리즘-비교&quot;&gt;정렬 알고리즘 비교&lt;/h1&gt;

&lt;h2 id=&quot;정렬-알고리즘-비교-표&quot;&gt;정렬 알고리즘 비교 표&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Sort&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Best&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Worst&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Stable&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Memory&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;버블 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N^2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TRUE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;선택 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N^2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N^2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FALSE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;삽입 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N^2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TRUE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;셸 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NlogN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Nlog^2N&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FALSE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;합병 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NlogN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NlogN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TRUE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;퀵 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NlogN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N^2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FALSE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;logN ~ N&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;추천-링크&quot;&gt;추천 링크&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;정렬 시뮬레이션: https://www.toptal.com/developers/sorting-algorithms&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="정렬" /><summary type="html">정렬 알고리즘 비교</summary></entry><entry><title type="html">[DataStructure]배열과 리스트</title><link href="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-%EB%B0%B0%EC%97%B4%EA%B3%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="[DataStructure]배열과 리스트" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-%EB%B0%B0%EC%97%B4%EA%B3%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-%EB%B0%B0%EC%97%B4%EA%B3%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8/">&lt;h1 id=&quot;선형-자료-구조&quot;&gt;선형 자료 구조&lt;/h1&gt;

&lt;h2 id=&quot;동적-배열dynamic-array&quot;&gt;동적 배열(dynamic array)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;동적 배열은 일반 배열을 이용해 만든 별도의 자료구조이다.
    &lt;ul&gt;
      &lt;li&gt;대부분 언어의 표준 라이브러리에 포함되어 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반 배열의 특징(동적 배열 포함)
    &lt;ul&gt;
      &lt;li&gt;원소들은 메모리의 연속된 위치에 저장된다.&lt;/li&gt;
      &lt;li&gt;주어진 위치의 원소를 반환하거나 변경하는 동작을 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;에 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동적 배열만의 특징
    &lt;ul&gt;
      &lt;li&gt;배열의 크기를 변경하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;reaize()&lt;/code&gt; 연산이 가능하다.
        &lt;ul&gt;
          &lt;li&gt;이 동작을 수행하는데 배열의 크기 N에 비례하는 시간이 소요된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;주어진 원소를 배열의 맨 끝에 추가함으로써 크기를 1 늘리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt; 연산을 지원한다.
        &lt;ul&gt;
          &lt;li&gt;이 동작을 수행하는데 상수 시간 1이 소요된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt; 연산의 원리
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt;연산이 상수 시간이 걸리는 이유
        &lt;ul&gt;
          &lt;li&gt;메모리를 할당받을 때 배열의 크기가 커질때를 대비해서 여유분의 메모리를 미리 할당받아 둔다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;capacity: 이미 할당받은 메모리의 크기(배열의 용량)&lt;/li&gt;
      &lt;li&gt;size:  실제 원소 개수(배열의 크기), 프로그램이 실제 인식하는 배열의 크기&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/43872286-f21984ec-9bbb-11e8-8991-2c705dbe8e59.JPG&quot; alt=&quot;append1&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;미리 할당해둔 메모리가 꽉 찼을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt;연산을 할 경우 재할당이 필요하다.
        &lt;ul&gt;
          &lt;li&gt;일반적인 재할당 코드의 시간 복잡도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N + M)&lt;/code&gt;으로 선형 시간이 소요된다.(M: 추가할 메모리 크기)&lt;/li&gt;
          &lt;li&gt;하지만, 재할당을 할때 정해진 개수(M)로 추가하는 것이 아니라 &lt;strong&gt;현재 가진 원소의 개수에 비례해서 여유분을 확보&lt;/strong&gt;하면 평균적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;의 시간 복잡도로 &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt;연산을 수행할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt;를 여러 번 수행할 때, 배열의 최종 크기를 미리 알 수 있다면, 동적 배열의 용량(capacity)를 미리 늘려둠으로써 재할당에 드는 비용을 없애는것이 좋다.
        &lt;ul&gt;
          &lt;li&gt;동적 배열을 사용했을 때 느려지는 대부분의 이유이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동적 배열은 c++의 &lt;code class=&quot;highlighter-rouge&quot;&gt;vector&lt;/code&gt;, C#과 Java에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;로 표준 라이브러리에서 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연결-리스트linked-list&quot;&gt;연결 리스트(linked list)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;연결 리스트는 배열과 달리 원소들이 메모리 여기저기 흩어져 있고, 각 원소들이 이전과 다음 원소를 가르키는 포인터(양방향 리스트) 방식으로 구현된다.&lt;/li&gt;
  &lt;li&gt;일반적인 노드(node) 구조체&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//담고 있는 원소
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//이전 노드, 다음 노드의 포인터
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;연결 리스트는 첫 번째 노드와 마지막 노드에 대한 포인트를 가지는데, 이들을 각각 머리(head)와 꼬리(tail)이라고 부른다.
    &lt;ul&gt;
      &lt;li&gt;머리와 꼬리를 포인터가 아니라 값이 정의되지 않는 텅 빈 노드(더미 노드)로 두면, 항상 이전 노드와 다음 노드가 존재한다고 가정할 수 있기 때문에 구현이 더욱 간단해진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연결 리스트의 특징
    &lt;ul&gt;
      &lt;li&gt;노드들이 메모리 여기저기에 흩어져 있기 때문에 특정 위치 값을 찾기 힘들다.
        &lt;ul&gt;
          &lt;li&gt;리스트의 머리부터 꼬리까지 포인터를 따라 가며 탐색해야 하기 때문에 선형 시간이 소요된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;노드의 삽입, 삭제가 간단하다.
        &lt;ul&gt;
          &lt;li&gt;삽입, 삭제될 해당 노드의 이전 노드와 다음 노드의 포인트만 바꿔주면 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연결 리스트 응용 연산들
    &lt;ul&gt;
      &lt;li&gt;잘라 붙이기 연산(splicing): 두 개의 서로 다른 리스트에서 각각의 일부 리스트를 서로 잘라서 붙이는 연산이다.
        &lt;ul&gt;
          &lt;li&gt;시간 복잡도는 리스트의 길이인 선형 시간에 비례하며, 잘라 붙였을 때의 크기를 알 수 없어 불안정하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;삭제했던 원소 돌려놓기(undo)&lt;/li&gt;
      &lt;li&gt;두 연산은 대부분 표준 라이브러리에서 제공하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연결 리스트는 C++의 &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, C#과 java의 &lt;code class=&quot;highlighter-rouge&quot;&gt;LinkedList&lt;/code&gt;로 표준 라이브러리에서 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;동적-배열과-연결-리스트-비교&quot;&gt;동적 배열과 연결 리스트 비교&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;동적 배열
    &lt;ul&gt;
      &lt;li&gt;임의의 원소에 빠르게 접근 가능하다.&lt;/li&gt;
      &lt;li&gt;원소들이 메모리에 연속해 배치되어 있어 CPU 캐시의 효율을 높여준다.&lt;/li&gt;
      &lt;li&gt;삽입과 삭제가 거의 없고, 끝에 추가만 하면 될 경우에 활용하기 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연결 리스트
    &lt;ul&gt;
      &lt;li&gt;삽입과 삭제가 빠르다.&lt;/li&gt;
      &lt;li&gt;삽입과 삭제가 많이 수행하는 작업에 활용하기 좋다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;작업&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;동적 배열&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;연결 리스트&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;이전 원소/다음 원소 찾기&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;맨 뒤에 원소 추가/삭제하기&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;맨 뒤 이외의 위치에 원소 추가/삭제하기&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(N)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;임의의 위치의 원소 찾기&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(N)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;크기 구하기&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;O(N), 구현에 따라 O(1)가능&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="선형자료구조" /><summary type="html">동적 배열과 연결 리스트 차이</summary></entry><entry><title type="html">[DataStructure]NlogN 정렬 알고리즘</title><link href="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-NlogN-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/" rel="alternate" type="text/html" title="[DataStructure]NlogN 정렬 알고리즘" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-NlogN%20%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-NlogN-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">&lt;h1 id=&quot;onlogn-정렬-알고리즘&quot;&gt;O(NlogN) 정렬 알고리즘&lt;/h1&gt;

&lt;h2 id=&quot;합병-정렬merge-sort&quot;&gt;합병 정렬(Merge Sort)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;합병 정렬은 분할 정복(Divide and conquer)방식으로 설계한 알고리즘이다.&lt;/li&gt;
  &lt;li&gt;합병 정렬 알고리즘 순서(오름차순)
    &lt;ol&gt;
      &lt;li&gt;분할 과정
        &lt;ul&gt;
          &lt;li&gt;주어진 배열 범위를 반으로 분할한다.&lt;/li&gt;
          &lt;li&gt;반으로 분할된 배열의 크기가 0 또는 1일때 까지 반복한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;합병 과정
        &lt;ul&gt;
          &lt;li&gt;두 배열 A, B를 합병한다고 가정하자.&lt;/li&gt;
          &lt;li&gt;두 배열 A, B를 합친 크기의 배열 C를 만든다.&lt;/li&gt;
          &lt;li&gt;배열 A부터 시작하는 인덱스와 배열 B부터 시작하는 인덱스를 설정하여 순서대로 서로 비교하여 작은 값부터 배열 C에 차례대로 삽입한다. (배열A, B는 반복된 위의 과정으로 오름차순으로 정렬되어 있다.)&lt;/li&gt;
          &lt;li&gt;배열 C가 원래 주어진 배열의 크기와 같을때까지 반복한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46913141-cb869500-cfc2-11e8-8feb-6196020ea3e4.gif&quot; alt=&quot;merge sort&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구현 코드(C언어)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MergeTwoArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//두 배열을 합친 크기의 임의의 배열
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sortArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fIdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sortArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rIdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sortArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sortArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//기존 배열의 원래 위치에 정렬된 배열을 삽입한다.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//오름차순
//arr[]: 입력 배열, left: arr배열의 가장 왼쪽 인덱스, right: arr배열의 가장 오른쪽 인덱스
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 중간 지점을 계산한다.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 둘로 나눠서 각각을 정렬한다.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 정렬된 두 배열을 병합한다.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;MergeTwoArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;퀵-정렬quick-sort&quot;&gt;퀵 정렬(Quick Sort)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;퀵 정렬은 분할 정복(Divide and conquer)방식으로 설계한 알고리즘이다.&lt;/li&gt;
  &lt;li&gt;퀵 정렬 알고리즘 순서(오름차순)
    &lt;ol&gt;
      &lt;li&gt;pivot을 설정한다.
        &lt;ul&gt;
          &lt;li&gt;pivot을 설정하는 방법은 배열의 특정 위치나 배열 원소의 값 중 중간값, 랜덤값 n번째 값으로 설정한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;현재 주어진 배열에서 pivot 위치를 찾아서 그 위치로 교환한다.
        &lt;ul&gt;
          &lt;li&gt;pivot보다 작은 값들은 모두 pivot 앞에 위치하고 큰 값은 모두 뒤에 위치해야한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;pivot을 기준으로 둘도 분할한 뒤 과정 1을 반복한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;퀵-정렬-특징&quot;&gt;퀵 정렬 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;퀵 정렬의 최악의 시간 복잡도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N^2)&lt;/code&gt;이다.
    &lt;ul&gt;
      &lt;li&gt;pivot의 위치가 지속적으로 주어진 배열의 가장 왼쪽 또는 오른쪽에 위치하여 2개로 분할하지 못하는 경우이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하지만, 퀵 정렬은 평균적으로 정렬 알고리즘 중에서 가장 빠르다.
    &lt;ul&gt;
      &lt;li&gt;최초 pivot을 설정하는 방법 중에서 주어진 배열을 2개로 분할할 수 있는 효율적인 방법들이 존재한다.&lt;/li&gt;
      &lt;li&gt;퀵 정렬의 내부 루프는 대부분의 컴퓨터 아키텍처에서 효율적으로 동작하도록 설계되어 있다.
        &lt;ul&gt;
          &lt;li&gt;메모리 참조가 지역화되어 있으므로 CPU의 cache 히트률이 높기 때문이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46913143-cc1f2b80-cfc2-11e8-900e-abb824175dbe.gif&quot; alt=&quot;quit sort&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구현 코드(C언어)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// pivot의 위치를 반환한다.
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 피벗의 위치는 가장 왼쪽!
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 교차되지 않을 때까지 반복
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 교차되지 않은 상태라면 Swap 실행
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//현재 high의 위치가 pivot이 있어야할 위치이다.
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//오름차순
//arr[]: 입력 배열, left: arr배열의 가장 왼쪽 인덱스, right: arr배열의 가장 오른쪽 인덱스
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// pivot 설정 후 위치를 찾는다.
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 왼쪽 영역을 정렬
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 오른쪽 영역을 정렬
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="정렬" /><summary type="html">합병 정렬, 퀵 정렬</summary></entry><entry><title type="html">[DataStructure]N^2 정렬 알고리즘</title><link href="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-N-2-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/" rel="alternate" type="text/html" title="[DataStructure]N^2 정렬 알고리즘" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-N%5E2%20%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/datastructure/DataStructure-N-2-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">&lt;h1 id=&quot;on2-정렬-알고리즘&quot;&gt;O(N^2) 정렬 알고리즘&lt;/h1&gt;

&lt;h2 id=&quot;버블-정렬bubble-sort&quot;&gt;버블 정렬(Bubble Sort)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;버블 정렬은 인접한 두 원소를 검사하여 정렬하는 방법이다.&lt;/li&gt;
  &lt;li&gt;버블 정렬 알고리즘 순서(오름차순)
    &lt;ol&gt;
      &lt;li&gt;주어진 배열 범위 중에서 첫 번째 위치와 두 번재 위치 크기를 비교하여 크기가 큰 수를 두 번째 위치에 둔다.&lt;/li&gt;
      &lt;li&gt;첫 번째 위치를 한 칸 뒤로 옮겨 과정 1을 반복한다.
        &lt;ul&gt;
          &lt;li&gt;두 번째 위치가 주어진 배열 범위의 끝에 도달하면 마지막 위치를 제외하여 배열 범위를 설정하고 과정 1로 돌아간다.
  (첫 번째 과정이 끝나면 가장 큰 원소가 가장 끝에 위치한다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;총 비교 횟수: &lt;code class=&quot;highlighter-rouge&quot;&gt;(n-1) + (n-2) + (n-3) ... + 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46913139-cb869500-cfc2-11e8-8636-19d7e306c711.gif&quot; alt=&quot;bubble sort&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구현 코드(C언어)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//오름차순
//arr[]: 입력 배열, n: arr배열 크기
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;선택-정렬selection-sort&quot;&gt;선택 정렬(Selection Sort)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;선택 정렬 알고리즘 순서(오름차순)
    &lt;ol&gt;
      &lt;li&gt;주어진 배열 범위 중에서 최소값을 찾는다.&lt;/li&gt;
      &lt;li&gt;해당 값을 가장 앞에 위치한 값과 교환한다.&lt;/li&gt;
      &lt;li&gt;가장 앞에 위치한 값을 제외하여 배열 범위를 설정하고 과정 1로 돌아간다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46913144-ccb7c200-cfc2-11e8-89f4-3b6db8bd339a.gif&quot; alt=&quot;selection sort&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구현 코드(C언어)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//오름차순
//arr[]: 입력 배열, n: arr배열 크기
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SelectionSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;maxIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 정렬 순서상 가장 앞서는 데이터의 index
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 최소값 탐색
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;maxIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/* 교환 */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxIdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;삽입-정렬insertion-sort&quot;&gt;삽입 정렬(Insertion Sort)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;삽입 정렬 알고리즘 순서(오름차순)
    &lt;ol&gt;
      &lt;li&gt;배열의 두 번째 위치부터 시작한다.&lt;/li&gt;
      &lt;li&gt;현재 위치보다 앞선 위치를 차례대로 순회하며 현재 값보다 작은 값을 찾는다.&lt;/li&gt;
      &lt;li&gt;작은 값을 찾으면, 그 바로 다음 위치로 옮기고 현재 위치 바로 다음 위치에서 과정 1을 반복한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46913140-cb869500-cfc2-11e8-81cf-e1fdfceec963.gif&quot; alt=&quot;insertion sort&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구현 코드(C언어)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//오름차순
//arr[]: 입력 배열, n: arr배열 크기
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InserSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//두 번째 위치부터 시작
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;insData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 정렬 대상을 insData에 저장
&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 비교 대상 한 칸 뒤로 밀기
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// 삽입 위치 찾았으니 탈출!
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 찾은 위치에 정렬 대상 삽입!
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="정렬" /><summary type="html">버블 정렬, 선택 정렬, 삽입 정렬</summary></entry><entry><title type="html">[Algorithm]이분 탐색</title><link href="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-%EC%9D%B4%EB%B6%84-%ED%83%90%EC%83%89/" rel="alternate" type="text/html" title="[Algorithm]이분 탐색" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-%EC%9D%B4%EB%B6%84%20%ED%83%90%EC%83%89</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-%EC%9D%B4%EB%B6%84-%ED%83%90%EC%83%89/">&lt;h1 id=&quot;binary-search--lower-bound--upper-bound&quot;&gt;Binary Search / Lower Bound / Upper Bound&lt;/h1&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Binary Search: 원하는 값 K를 찾는 과정&lt;/li&gt;
  &lt;li&gt;Lower Bound: &lt;strong&gt;원하는 값 K 이상인 값&lt;/strong&gt; 이 처음 나오는 위치를 찾는 과정&lt;/li&gt;
  &lt;li&gt;Upper Bound: &lt;strong&gt;원하는 값 K 초과인 값&lt;/strong&gt; 이 처음 나오는 위치를 찾는 과정&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lower-bound-알고리즘-과정&quot;&gt;Lower Bound 알고리즘 과정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;arr[] = { 1, 3, 5, 7, 9, 11 }, target = 8 일때, Louwer Bound를 구하라.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916196-34393600-cff2-11e8-8bf8-0ff58198875b.JPG&quot; alt=&quot;lb1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시작 인덱스 = 0, 끝 인덱스 = 5, 중간 인덱스 = 2 이다.
    &lt;ul&gt;
      &lt;li&gt;중간 인덱스 2의 값은 5이고, 이 값은 타겟인 8보다 작기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;시작 인덱스 = 중간 인덱스 + 1&lt;/code&gt;로 설정하고 다음 반복문으로 간다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916197-34393600-cff2-11e8-845c-918fcf1408d0.JPG&quot; alt=&quot;lb2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시작 인덱스 = 3, 끝 인덱스 = 5, 중간 인덱스 = 4 이다.
    &lt;ul&gt;
      &lt;li&gt;9는 타겟인 8보다 크기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;끝 인덱스 = 중간 인덱스&lt;/code&gt;로 설정하고 다음 반복문으로 간다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916198-34393600-cff2-11e8-873c-3b15b7db529e.JPG&quot; alt=&quot;lb3&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시작 인덱스 = 3, 끝 인덱스 = 4, 중간 인덱스 = 3 이다.
    &lt;ul&gt;
      &lt;li&gt;7은 타겟 8보다 작기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;시작 인덱스 = 중간 인덱스 + 1&lt;/code&gt;로 설정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916199-34d1cc80-cff2-11e8-82aa-bf1f828808da.JPG&quot; alt=&quot;lb4&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시작 인덱스 = 4, 끝 인덱스 = 4, 중간 인덱스 = 4 이다.
    &lt;ul&gt;
      &lt;li&gt;시작 인덱스와 끝 인덱스가 같기 때문에 반복문에 들어가지 않으며, 끝 인덱스를 Lower Bound가 찾는 인덱스로 반환한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bound의 반환 값은 인덱스가 0부터 시작하므로 +1을 해서 몇 번째인지 바로 반환할 수도 있고, 반환받은 값에서 +1을해도 상관없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구현-코드&quot;&gt;구현 코드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Binary Search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제 코드&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _CRT_SECURE_NO_WARNINGS
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//Binary Search
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Binary Search, target: 8 =&amp;gt; INDEX: %d, VALUE: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;결과&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Binary Search, target: 8 =&amp;gt; INDEX: -1, VALUE: -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Lower Bound&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제 코드&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _CRT_SECURE_NO_WARNINGS
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lowerBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//Lower Bound
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowerBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Lower Bound, target: 8 =&amp;gt; INDEX: %d, VALUE: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;결과&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Lower Bound, target: 8 =&amp;gt; INDEX: 4, VALUE: 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Upper Bound&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;예제 코드&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _CRT_SECURE_NO_WARNINGS
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upperBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//Upper Bound
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upperBound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Upper Bound, target: 8 =&amp;gt; INDEX: %d, VALUE: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;결과&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Upper Bound, target: 8 =&amp;gt; INDEX: 4, VALUE: 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="유명 알고리즘" /><summary type="html">Binary Search, Lower Bound, Upper Bound</summary></entry><entry><title type="html">[Algorithm]LCS 알고리즘</title><link href="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-LIS%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/" rel="alternate" type="text/html" title="[Algorithm]LCS 알고리즘" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-LIS%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-LIS%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">&lt;h1 id=&quot;longest-increasing-subsequencelis-알고리즘&quot;&gt;Longest Increasing Subsequence(LIS) 알고리즘&lt;/h1&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;가장 긴 증가하는 부분 수열&lt;/li&gt;
  &lt;li&gt;예제 그림&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916274-410a5980-cff3-11e8-948a-31488df44de1.JPG&quot; alt=&quot;lis&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;두번째 줄의 노란색 박스 부분이 LIS를 나타내는 모습이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구현&quot;&gt;구현&lt;/h2&gt;
&lt;h3 id=&quot;1-동적-계획법&quot;&gt;1. 동적 계획법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CODEMCD/Algorithm/blob/master/Code%20Review/ALGOSPOT/LIS.md&quot;&gt;알고스팟 LIS 문제 분석&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Top-down, Bottom-up 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시간복잡도: &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N^2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-lower-bound&quot;&gt;2. Lower-bound&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;알고리즘 과정
    &lt;ul&gt;
      &lt;li&gt;num[]: 입력 수열, lis[]: LIS를 만들기 위해 비어있는 수열
        &lt;ol&gt;
          &lt;li&gt;lis배열에 아무 값이 없다면(초기화), num배열의 가장 첫번째 값을 삽입한다.&lt;/li&gt;
          &lt;li&gt;lis배열에서 가장 큰 값(= 가장 오른쪽에 있는 값)보다 현재 보고 있는 num[i]값이 크다면 lis배열에 num[i]값을 추가한다.&lt;/li&gt;
          &lt;li&gt;작다면 lower_bound(주어진 집합의 어떤 원소보다 작거나 같은 원소)를 이용하여 해당 위치에 num[i]값을 삽입한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시간복잡도: &lt;code class=&quot;highlighter-rouge&quot;&gt;O(NlogN)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;구현 코드&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _CRT_SECURE_NO_WARNINGS
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define N 1001
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;관련-문제&quot;&gt;관련 문제&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.acmicpc.net/problem/11053&lt;/li&gt;
  &lt;li&gt;https://algospot.com/judge/problem/read/LIS&lt;/li&gt;
  &lt;li&gt;이외에 LIS알고리즘을 응용하는 다양한 문제들이 있다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="유명 알고리즘" /><summary type="html">수열 알고리즘</summary></entry><entry><title type="html">[Algorithm]LCS 알고리즘</title><link href="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-LCS%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/" rel="alternate" type="text/html" title="[Algorithm]LCS 알고리즘" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-LCS%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-LCS%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">&lt;h1 id=&quot;longest-common-subsequencelcs-알고리즘&quot;&gt;Longest Common Subsequence(LCS) 알고리즘&lt;/h1&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;최장 공통 부분 문자열&lt;/li&gt;
  &lt;li&gt;예제 그림&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916273-4071c300-cff3-11e8-84eb-100b9859a064.JPG&quot; alt=&quot;lcs&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;관련-문제&quot;&gt;관련 문제&lt;/h2&gt;
&lt;h3 id=&quot;문제-링크&quot;&gt;문제 링크&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;LCS 길이 구하기
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/9251&quot;&gt;https://www.acmicpc.net/problem/9251&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LCS 길이 + LCS 문자열 구하기
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/9252&quot;&gt;https://www.acmicpc.net/problem/9252&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;추가-테스트-케이스&quot;&gt;추가 테스트 케이스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;입력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AKAK
AAK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;출력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4
AAK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;코드-분석&quot;&gt;코드 분석&lt;/h3&gt;
&lt;h4 id=&quot;lcs-길이-구하기&quot;&gt;LCS 길이 구하기&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;동적 계획법&lt;/li&gt;
  &lt;li&gt;str1[]: 입력 배열1, str2[]: 입력 배열2&lt;/li&gt;
  &lt;li&gt;dp[x][y]: str1[x], str2[y] 일때, LCS 길이
    &lt;ul&gt;
      &lt;li&gt;점화식 계산을 위해 인덱스 0일 때, 모든 값을 0으로 채워준다.(즉 str1, str2길이가 n일 때, dp[n+1][n+1]이어야 한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;점화식: for문 i: 1 ~ str1 문자열 길이, j: 1 ~ str2 문자열 길이&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;str1[i - 1] == str2[j - 1] =&amp;gt; dp[i][j] = dp[i - 1][j - 1] + 1
str1[i - 1] != str2[j - 1] =&amp;gt; MAX(dp[i - 1][j], dp[i][j - 1])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;예제 배열 최종 결과 그림&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916237-bde90380-cff2-11e8-875a-4ef8cb7b275b.JPG&quot; alt=&quot;lcs1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시간 복잡도: str1, str2 중 최대 문자열 길이를 N이라 할때, &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N^2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lcs-문자열-구하기&quot;&gt;LCS 문자열 구하기&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;check[x][y]: str1[x] == str2[y]일때 LCS 길이, 아니면 0값이다.
    &lt;ul&gt;
      &lt;li&gt;위의 LCS 길이를 구하는 점화식에서 두 문자열이 같을 때의 dp배열값을 같은 인덱스 위치 check배열에 삽입한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;maxLen: LCS 길이 값&lt;/li&gt;
  &lt;li&gt;슈도 코드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for( i: str1 문자열길이 ~ 1)
  for( j: str2 문자열길이 ~ 1)
    if(check[i][j] == maxLen)
      정답 배열[maxLen - 1] = str1[i - 1] or str2[j - 1]
      maxLen--
      break
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;예제 배열 그림&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916238-be819a00-cff2-11e8-805f-83157ea673bd.JPG&quot; alt=&quot;lcs2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시간복잡도: &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N^2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;결과-코드&quot;&gt;결과 코드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;LCS 길이 + LCS 문자열 구하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _CRT_SECURE_NO_WARNINGS
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define max(a,b) ((a) &amp;gt; (b) ? (a) : (b))
#define N 1002
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//str1, str2: 입력 배열
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//dp: LCS 길이를 계산할 배열, check: LCS 문자열을 계산할 배열
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//ans: LCS 문자열을 저장할 배열
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//LCS 길이 계산
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//LCS 문자열 계산
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="유명 알고리즘" /><summary type="html">문자열 알고리즘</summary></entry><entry><title type="html">[Algorithm]KMP 알고리즘</title><link href="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-KMP%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/" rel="alternate" type="text/html" title="[Algorithm]KMP 알고리즘" /><published>2018-10-14T00:00:00+09:00</published><updated>2018-10-14T00:00:00+09:00</updated><id>https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-KMP%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</id><content type="html" xml:base="https://codemcd.github.io/pages/CODEMCD/algorithm/Algorithm-KMP%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">&lt;h1 id=&quot;kmp-알고리즘&quot;&gt;KMP 알고리즘&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;풀네임은 커누스-모리스-프랫(Knuth-Morris-Pratt) 알고리즘으로, 문자열 검색 알고리즘이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;미리-알아-둘점&quot;&gt;미리 알아 둘점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;문자열 S의 길이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;|S|&lt;/code&gt;로 표기&lt;/li&gt;
  &lt;li&gt;문자열 S의 i번부터 j번까지 구성된 부분 문자열을 &lt;code class=&quot;highlighter-rouge&quot;&gt;S[i...j]&lt;/code&gt;로 표기&lt;/li&gt;
  &lt;li&gt;문자열 S의 0번부터 a번까지 구성된 부분 문자열을 접두사(prefix)라 부르고, &lt;code class=&quot;highlighter-rouge&quot;&gt;S[...a]&lt;/code&gt;로 표기&lt;/li&gt;
  &lt;li&gt;문자열 S의 b번부터 끝까지 구성된 부분 문자열을 접미사(suffix)라 부르고, &lt;code class=&quot;highlighter-rouge&quot;&gt;S[b...]&lt;/code&gt;로 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기본-개념&quot;&gt;기본 개념&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;기본적인 검색 알고리즘은 한 문자열의 시작점을 하나씩 옮겨가면서 찾을 문자열을 검색하는 것이다.&lt;/li&gt;
  &lt;li&gt;KMP 알고리즘은 시작점을 하나씩 옮기는 것이 아니라 최적화 과정을 거쳐 옮길 칸 수를 정한다.&lt;/li&gt;
  &lt;li&gt;예를 들어, N = “aabaabac”를 찾는 경우가 있다.
    &lt;ul&gt;
      &lt;li&gt;H 문자열의 해당 부분 문자열인 &lt;code class=&quot;highlighter-rouge&quot;&gt;H[i...i + 6]&lt;/code&gt;이 “aabaaba”까지 일치한다.&lt;/li&gt;
      &lt;li&gt;그렇다면, i + 1에서 시작하는 N은 H와 일치할 수 없다는 것을 알 수 있다.&lt;/li&gt;
      &lt;li&gt;가능성이 있는 위치는 i + 3, i + 6 이라는 것을 아래의 그림을 보면 알 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916211-69de1f00-cff2-11e8-816e-93fc2fe2346a.JPG&quot; alt=&quot;kmp&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;다음-시작-위치-찾기&quot;&gt;다음 시작 위치 찾기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다음 시작 위치를 어떻게 찾는지 예제 그림을 보며, 알아보자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34755287/46916212-6b0f4c00-cff2-11e8-92e4-2ff9a6c7885c.JPG&quot; alt=&quot;kmp2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 그림에서 시작 위치 i일때, H와 N을 맞춰보면 matched글자가 일치하고 다음 글자가 불일치하는 상황을 볼 수 있다.&lt;/li&gt;
  &lt;li&gt;matched글자가 일치했기 때문에, N의 접두사 &lt;code class=&quot;highlighter-rouge&quot;&gt;N[...matced - 1]&lt;/code&gt;가  &lt;code class=&quot;highlighter-rouge&quot;&gt;H[i...i + matched - 1]&lt;/code&gt;와 일치했음을 알 수 있다.(회색으로 칠해진 부분)&lt;/li&gt;
  &lt;li&gt;시작 위치 i + k가 답이 될려면, B와 C가 서로 같아야 하며, 결과적으로 A와 C도 같아야 한다.(굵은 선 네모 부분)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A = C&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;N[...matced - 1]&lt;/code&gt;의 접두사이기도 하고 접미사이기도 한다.&lt;/li&gt;
      &lt;li&gt;시작 위치 i + k가 답을 찾을 수 있기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;N[...matced - 1]&lt;/code&gt;의 길이 matched - k인 접두사와 접미사가 같아야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정리하면, 답이 될 수 있는 바로 다음 위치를 찾기 위해서는 N의 각 접두사에 대해 접두사도 되고 접미사도 되는 문자열의 최대 길이를 계산해야 한다.
    &lt;ul&gt;
      &lt;li&gt;위의 예제 “aabaaba”에서 접두사도 되고 접미사도 되는 문자열은 “aaba”와 “a” 두가지 있다.&lt;/li&gt;
      &lt;li&gt;여기서 최대 길이 문자열은 “aaba”이기 때문에, 시작 위치를 3만큼 옮겨주었던 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kmp-알고리즘-구현&quot;&gt;KMP 알고리즘 구현&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다음 시작 위치를 찾는 배열을 다음과 같이 정의한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pi[i]&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;N[...i]&lt;/code&gt;의 접두사도 되고 접미사도 되는 문자열의 최대 길이&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pi[]&lt;/code&gt;는 어디까지 일치했는지가 주어질 때 다음 시작 위치를 알려주기 때문에, 이를 흔히 부분 일치 테이블(partial match table) 또는 실패 함수(faulure function)이라 부른다.
    &lt;ul&gt;
      &lt;li&gt;찾는 문자열 “aabaabac”의 각 접두사에 대한 부분 일치 테이블은 밑에와 같이 계산된다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;i&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;N[…i]&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;접두사이면서 접미사인 최대 문자열&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;pi[i]&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;(없음)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aa&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aab&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;(없음)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aaba&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;a&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aabaa&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aa&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aabaab&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aab&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aabaaba&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aaba&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;aabaabac&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;(없음)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;KMP 알고리즘 동작 과정
    &lt;ul&gt;
      &lt;li&gt;초기에는 단순한 알고리즘과 같이 시작 위치 0부터 시작한다.&lt;/li&gt;
      &lt;li&gt;만약 matched글자가 일치한 후 불일치가 발생한다면, 위 그림의 A의 길이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;pi[matched - 1]&lt;/code&gt;이다.&lt;/li&gt;
      &lt;li&gt;시작 위치를 &lt;code class=&quot;highlighter-rouge&quot;&gt;matched - pi[matched - 1]&lt;/code&gt;만큼 증가 시킨다.
        &lt;ul&gt;
          &lt;li&gt;위와 같이 동작하면, &lt;strong&gt;시작 위치를 움직인 이후 첫 글자부터 다시 대응시켜 나갈 필요가 없다는 것이 중요한 관점이다.&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;새로운 위치에서 비교를 시작하더라도 N의 첫 &lt;code class=&quot;highlighter-rouge&quot;&gt;pi[matched - 1]&lt;/code&gt;글자는 대응되는 H의 글자와 일치하기 때문이다.(위 그림에서 B와 C가 서로 같기 때문이다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;matched를 &lt;code class=&quot;highlighter-rouge&quot;&gt;pi[matched - 1]&lt;/code&gt;로 변경하고 비교를 계속한다.&lt;/li&gt;
      &lt;li&gt;답을 찾은 경우에는 현재 시작 위치를 답의 목록에 추가해주고, 불일치가 발생한 경우와 같이 다음 시작 위치에서부터 다시 검색을 한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;matched = 0&lt;/code&gt;이면 한 글자도 일치하지 않았다는 의미이므로, 바로 다음 시작 위치에서 처음부터 검색을 시작한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구현 코드
    &lt;ul&gt;
      &lt;li&gt;참고사항으로, 부분 일치 테이블의 구현과 관련된 점은 아래에서 설명한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//'짚더미' H의 부분 문자열로 '바늘' N이 출현하는 시작 위치들을 모두 반환한다.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmpSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//pi[i] = N[...i]의 접미사도 되고 접두사도 되는 문자열의 최대 길이
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPartialMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//begin = matched = 0 에서부터 시작
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//만약 짚더미의 해당 글자가 바늘의 해당 글자와 같다면
&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//결과적으로 m글자가 모두 일치했다면 답에 추가한다.
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//예외: matched가 0인 경우에는 다음 칸에서부터 계속
&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//begin을 옮겼다고 처음부터 다시 비교할 필요가 없다.
&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;//옮긴 후에도 pi[matched - 1]만큼은 항상 일치하기 때문이다.
&lt;/span&gt;				&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;시간 복잡도
    &lt;ul&gt;
      &lt;li&gt;getPartialMatch() 시간 복잡도는 아직 고려하지 않는다.&lt;/li&gt;
      &lt;li&gt;while문에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;begin + matched&lt;/code&gt; 는 절대 감소하지 않는다.
        &lt;ul&gt;
          &lt;li&gt;matched가 감소하면 그만큼 begin이 증가하기 때문이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;따라서, 최대 시간 복잡도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(|H|)&lt;/code&gt;입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;부분-일치-테이블-생성하기&quot;&gt;부분 일치 테이블 생성하기&lt;/h2&gt;
&lt;h3 id=&quot;1-간단한-알고리즘&quot;&gt;1. 간단한 알고리즘&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;N의 각 접두사에 대해 가능한 모든 답을 시도한다.&lt;/li&gt;
  &lt;li&gt;길이 p인 접두사 &lt;code class=&quot;highlighter-rouge&quot;&gt;N[...p - 1]&lt;/code&gt;이 주어졌을때, 길이 &lt;code class=&quot;highlighter-rouge&quot;&gt;p - 1, p - 2, ...&lt;/code&gt;들을 순회하며 이들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;N[... p - 1]&lt;/code&gt;의 접미사가 되는지 확인한다.&lt;/li&gt;
  &lt;li&gt;모든 접두사에 대해 한꺼번에 계산한다면, 시간 복잡도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(|N|^2)&lt;/code&gt;이다.&lt;/li&gt;
  &lt;li&gt;구현 코드
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//N에서 자기 자신을 찾으면서 나타나는 부분 일치를 이용해 pi[]를 계산한다.
//pi[i] = N[...i]의 접미사도 되고 접두사도 되는 문자열의 최대 길이
vector&amp;lt;int&amp;gt; getPartialMatchNaive(const string &amp;amp;N) {
  int m = N.size();
  vector&amp;lt;int&amp;gt; pi(m, 0);
  //단순한 문자열 검색 알고리즘을 구현한다.
  for (int begin = 1; begin &amp;lt; m; ++begin) {
      for (int i = 0; i &amp;lt; m; ++i) {
          if (N[begin + i] != N[i]) break;
          //i + 1글자가 서로 대응되었다.
          pi[begin + i] = max(pi[begin + i], i + 1);
      }
  }
  return pi;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-kmp-알고리즘-활용&quot;&gt;2. KMP 알고리즘 활용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;고려 사항
    &lt;ul&gt;
      &lt;li&gt;begin을 옮길 때 이전에 계산한 pi[] 값을 사용한다.
        &lt;ul&gt;
          &lt;li&gt;현재 matched글자가 일치했다면 pi[matched - 1]는 항상 계산된 뒤임을 증명할 수 있기 때문이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;pi[]의 각 원소는 최대 한 번만 변경되기 때문에 위의 간단한 알고리즘에서 처럼 max()연산을 해줄 필요가 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구현 코드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPartialMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//KMP로 자기 자신을 찾는다.
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//N을 N에서 찾는다. begin = 0이면 자기 자신을 찾아버리니까 안됨!
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//비교할 문자가 N의 끝에 도달할 때까지 찾으면서 부분 일치를 모두 기록한다.
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;시간 복잡도: &lt;code class=&quot;highlighter-rouge&quot;&gt;O(|N|)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>CODEMCD</name><email>psbum1609@gmail.com</email></author><category term="유명 알고리즘" /><summary type="html">문자열 검색 알고리즘</summary></entry></feed>